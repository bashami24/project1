

HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.

Unit testing of service classes
Logging within service classes

   import org.example.Model.Book;
import org.example.Model.Seller;
import org.example.Service.BookService;
import org.example.Service.SellerService;
import org.example.exception.BookNotFoundException;
import org.example.exception.SellerAlreadyExistsException;
import org.junit.Before;
import org.junit.Test;

import java.util.UUID;

import static org.junit.Assert.*;

public class ServiceTest {

    private BookService bookService;
    private SellerService sellerService;

    @Before
    public void setUp() {
        // Initialize service instances
        bookService = new BookService();
        sellerService = new SellerService();
    }

    @Test
    public void testAddBook() {
        // Test adding a book
        Book book = new Book("12345", "Sample Book", 10.99, "Seller1");
        Book addedBook = bookService.addBook(book);

        assertNotNull(addedBook);
        assertEquals(book, addedBook);
    }

    @Test
    public void testUpdateBook() throws BookNotFoundException {
        // Add a book
        Book book = new Book("12345", "Sample Book", 10.99, "Seller1");
        bookService.addBook(book);

        // Update the book
        Book updatedBook = new Book("12345", "Updated Book", 15.99, "Seller2");
        bookService.updateBook(UUID.fromString("12345"), updatedBook);

        // Verify the book is updated
        Book retrievedBook = bookService.getBookById(UUID.fromString("12345"));
        assertEquals(updatedBook, retrievedBook);
    }

    @Test(expected = BookNotFoundException.class)
    public void testDeleteBook() throws BookNotFoundException {
        // Add a book
        Book book = new Book("12345", "Sample Book", 10.99, "Seller1");
        bookService.addBook(book);

        // Delete the book
        bookService.deleteBook(UUID.fromString("12345"));

        // Verify the book is deleted
        bookService.getBookById(UUID.fromString("12345"));
    }

    @Test
    public void testAddSeller() throws SellerAlreadyExistsException {
        // Test adding a seller
        Seller seller = new Seller("Seller1");
        sellerService.addSeller(seller);

        Seller retrievedSeller = sellerService.getSellerByName("Seller1");

        assertNotNull(retrievedSeller);
        assertEquals(seller.getName(), retrievedSeller.getName());
    }

    @Test
    public void testUpdateSeller() throws SellerAlreadyExistsException {
        // Add a seller
        Seller seller = new Seller("Seller1");
        sellerService.addSeller(seller);

        // Update the seller
        Seller updatedSeller = new Seller("Seller2");
        sellerService.updateSeller("Seller1", updatedSeller);

        // Verify the seller is updated
        Seller retrievedSeller = sellerService.getSellerByName("Seller2");
        assertEquals(updatedSeller, retrievedSeller);
    }

    // Add more test cases as needed
}
//////////////////////////////////////////////////////////////////////////////////////

package org.example.Model;

import java.util.Objects;

public class Book {
    private static long nextId = 1; // Static variable to keep track of the next ID
    private long id; // Change from UUID to long
    private String name;
    private double price;
    private String authorName;

    // Constructors

    public Book() {
        this.id = nextId++; // Assign the next ID and then increment it
    }

    public Book(String name, double price, String authorName) {
        this(); // Call the default constructor to assign ID
        this.name = name;
        this.price = price;
        this.authorName = authorName;
    }

    // Getters and setters

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public String getAuthorName() {
        return authorName;
    }

    public void setAuthorName(String authorName) {
        this.authorName = authorName;
    }

    // hashCode, equals, and toString methods

    @Override
    public int hashCode() {
        return Objects.hash(id, name, price, authorName);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Book book = (Book) o;
        return Double.compare(book.price, price) == 0 &&
                id == book.id &&
                Objects.equals(name, book.name) &&
                Objects.equals(authorName, book.authorName);
    }

    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", price=" + price +
                ", authorName='" + authorName + '\'' +
                '}';
    }
}

