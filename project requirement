

HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.


import React from 'react';
import Seller from '../models/Seller';

interface SellerListProps {
  sellers: Seller[];
}

const SellerList: React.FC<SellerListProps> = ({ sellers }) => (
  <div>
    <h2>Sellers</h2>
    <ul>
      {sellers.map(seller => (
        <li key={seller.id}>{seller.name}</li>
      ))}
    </ul>
  </div>
);

export default SellerList;

import React, { useState, useEffect } from 'react';
import SellerList from '../components/SellerList';
import Seller from '../models/Seller';

const SellerPage: React.FC = () => {
  const [sellers, setSellers] = useState<Seller[]>([]);

  useEffect(() => {
    const fetchSellers = async () => {
      const response = await fetch('http://localhost:9001/sellers');
      const data = await response.json();
      setSellers(data);
    };

    fetchSellers();
  }, []);

  return (
    <div>
      <SellerList sellers={sellers} />
    </div>
  );
};

export default SellerPage;

import React, { useState, useEffect } from 'react';
import ProductList from '../components/ProductList';
import Product from '../models/Product';

const ProductPage: React.FC = () => {
  const [products, setProducts] = useState<Product[]>([]);

  useEffect(() => {
    const fetchProducts = async () => {
      const response = await fetch('http://localhost:9001/products');
      const data = await response.json();
      setProducts(data);
    };

    fetchProducts();
  }, []);

  return (
    <div>
      <ProductList products={products} />
    </div>
  );
};

export default ProductPage;


//seller list

import React from 'react';
import Seller from '../models/Seller';

interface SellerListProps {
  sellers: Seller[];
}

const SellerList: React.FC<SellerListProps> = ({ sellers }) => (
  <div>
    <h2>Sellers</h2>
    <ul>
      {sellers.map(seller => (
        <li key={seller.id}>{seller.name}</li>
      ))}
    </ul>
  </div>
);

export default SellerList;

import React from 'react';
import Product from '../models/Product';

interface ProductListProps {
  products: Product[];
}

const ProductList: React.FC<ProductListProps> = ({ products }) => (
  <div>
    <h2>Products</h2>
    <ul>
      {products.map(product => (
        <li key={product.id}>{product.name} - ${product.price}</li>
      ))}
    </ul>
  </div>
);

export default ProductList;



