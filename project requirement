

HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.




m// pages/SellerPage.tsx
import React, { useState, useEffect } from 'react';
import { Seller } from '../models/Seller';
import { getAllSellers, addSeller } from '../services/SellerService';
import SellerList from '../components/SellerList'; // Correct import

const SellerPage: React.FC = () => {
    const [sellers, setSellers] = useState<Seller[]>([]);
    const [newSellerId, setNewSellerId] = useState<number>(0);
    const [newSellerName, setNewSellerName] = useState<string>('');

    useEffect(() => {
        getAllSellers().then(setSellers);
    }, []);

    const handleAddSeller = async () => {
        if (!newSellerName || newSellerId <= 0) return;
        await addSeller({ id: newSellerId, name: newSellerName }); // Pass seller object
        setNewSellerId(0);
        setNewSellerName('');
        getAllSellers().then(setSellers);
    };

    return (
        <div>
            <h1>Sellers</h1>
            <ul>
                {sellers.map((seller) => (
                    <li key={seller.id}>
                        <SellerList seller={seller} /> {/* Pass seller object */}
                    </li>
                ))}
            </ul>
            <input
                type="number"
                placeholder="Enter seller ID"
                value={newSellerId}
                onChange={(e) => setNewSellerId(parseInt(e.target.value))}
            />
            <input
                type="text"
                placeholder="Enter seller name"
                value={newSellerName}
                onChange={(e) => setNewSellerName(e.target.value)}
            />
            <button onClick={handleAddSeller}>Add Seller</button>
        </div>
    );
};

export default SellerPage;
