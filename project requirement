

HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.


public class BookSellerController {

    BookService bookService;
    SellerService sellerService;

    public BookSellerController(BookService bookService, SellerService sellerService) {
        this.bookService = bookService;
        this.sellerService = sellerService;
    }

    public Javalin getAPI() {
        Javalin api = Javalin.create();

        api.get("health", context -> {
            context.result("Server is UP");
        });

        // Books Endpoints
        api.get("books", context -> {
            List<Book> bookList = bookService.getAllBooks();
            context.json(bookList);
        });

        api.post("books", context -> {
            try {
                ObjectMapper om = new ObjectMapper();
                Book b = om.readValue(context.body(), Book.class);
                bookService.saveBook(b);
                context.status(201);
            } catch (InvalidBookException e) {
                context.result(e.getMessage());
                context.status(400);
            }
        });

        api.put("books/:id", context -> {
            long id = Long.parseLong(context.pathParam("id"));
            try {
                ObjectMapper om = new ObjectMapper();
                Book updatedBook = om.readValue(context.body(), Book.class);
                bookService.updateBook(id, updatedBook);
                context.status(200);
            } catch (SQLException e) {
                context.status(500);
            } catch (BookNotFoundException e) {
                context.status(404);
            } catch (InvalidBookException e) {
                context.result(e.getMessage());
                context.status(400);
            }
        });

        api.delete("books/:id", context -> {
            long id = Long.parseLong(context.pathParam("id"));
            try {
                bookService.deleteBook(id);
                context.status(200);
            } catch (SQLException e) {
                context.status(500);
            } catch (BookNotFoundException e) {
                context.status(404);
            }
        });

        // Sellers Endpoints
        api.get("sellers", context -> {
            List<Seller> sellerList = sellerService.getAllSellers();
            context.json(sellerList);
        });

        api.post("sellers", context -> {
            try {
                ObjectMapper om = new ObjectMapper();
                Seller s = om.readValue(context.body(), Seller.class);
                sellerService.saveSeller(s);
                context.status(201);
            } catch (InvalidSellerException e) {
                context.result(e.getMessage());
                context.status(400);
            }
        });

        return api;
    }
}
