import React, { useState, useEffect } from "react";
import {
  Grid,
  makeStyles,
  Card,
  CardContent,
  MenuItem,
  InputLabel,
  Select,
  CardActions,
  Button,
  CardHeader,
  FormControl,
} from "@material-ui/core";

import { Formik, Form, Field } from "formik";
import * as Yup from "yup";
import { TextField } from "formik-material-ui";
import { postLeaveAPI, updateLeaveAPI } from "../Services/LeavesAPI";
import { toast } from "react-toastify";
import { Leaves } from "../Models/Leaves";
import { Employee } from "../Models/Employee";

const useStyle = makeStyles((theme) => ({
  padding: {
    padding: theme.spacing(3),
  },
  button: {
    margin: theme.spacing(1),
  },
}));

interface LeaveFormProps {
  employee: Employee;
  setAllLeaves: any;
  allLeaves: Leaves[];
  setShowForm: any;
  selectedLeave?: Leaves;
}

const LeaveForm: React.FC<LeaveFormProps> = ({
  employee,
  setAllLeaves,
  allLeaves,
  setShowForm,
  selectedLeave,
}) => {
  const [otherLeaveType, setOtherLeaveType] = React.useState("");
  const today = new Date(Date.now());
  today.setHours(0, 0, 0, 0);

  const initialValues: Leaves = selectedLeave
    ? selectedLeave
    : {
        leaveName: "",
        startDate: null,
        endDate: null,
        acceptedFlag: false,
        activeFlag: true,
        employeeID: employee.employeeID,
        managerID: undefined,
      };

  const validationSchema = Yup.object({
    leaveName: Yup.string().required("Leave type is required"),
    startDate: Yup.date()
      .nullable()
      .required("Start date is required")
      .min(today, "Start date can't be before today"),
    endDate: Yup.date()
      .nullable()
      .required("End date is required")
      .min(Yup.ref("startDate"), "End date can't be before start date"),
  });

  const handleSubmit = async (values: Leaves, { setSubmitting }: any) => {
    try {
      if (selectedLeave) {
        await updateLeaveAPI(values);
        const updatedLeaves = allLeaves.map((leave) =>
          leave.id === values.id ? values : leave
        );
        setAllLeaves(updatedLeaves);
        toast.success("Leave updated successfully");
      } else {
        await postLeaveAPI(values, employee.employeeID);
        setAllLeaves([...allLeaves, values]);
        toast.success("Leave requested successfully");
      }
      setShowForm(false);
    } catch (error) {
      console.error("Error:", error);
      toast.error("Failed to update or request leave");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Grid container justify="center" spacing={2}>
      <Grid item xs={12} md={6}>
        <Card>
          <CardHeader title="Leave Request Form" />
          <CardContent>
            <Formik
              initialValues={initialValues}
              validationSchema={validationSchema}
              onSubmit={(values, { setSubmitting }) => {
                handleSubmit(values, { setSubmitting });
              }}
            >
              {({ values, setFieldValue, isSubmitting }) => (
                <Form>
                  <Grid container spacing={2}>
                    <Grid item xs={12}>
                      <FormControl fullWidth variant="outlined">
                        <InputLabel>Leave Type</InputLabel>
                        <Select
                          name="leaveName"
                          label="Leave Type"
                          value={values.leaveName}
                          onChange={(e: any) => {
                            setFieldValue("leaveName", e.target.value);
                            setOtherLeaveType("");
                          }}
                        >
                          <MenuItem value="Sick Leave">Sick Leave</MenuItem>
                          <MenuItem value="Vacation">Vacation</MenuItem>
                          <MenuItem value="Other">Other</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>

                    {values.leaveName === "Other" && (
                      <Grid item xs={12}>
                        <Field
                          component={TextField}
                          name="otherLeaveType"
                          label="Specify Leave Type"
                          fullWidth
                          variant="outlined"
                          onChange={(e: any) => {
                            setOtherLeaveType(e.target.value);
                          }}
                        />
                      </Grid>
                    )}

                    <Grid item xs={12}>
                      <Field
                        component={TextField}
                        type="date"
                        name="startDate"
                        label="Start Date"
                        InputLabelProps={{ shrink: true }}
                        fullWidth
                        variant="outlined"
                      />
                    </Grid>

                    <Grid item xs={12}>
                      <Field
                        component={TextField}
                        type="date"
                        name="endDate"
                        label="End Date"
                        InputLabelProps={{ shrink: true }}
                        fullWidth
                        variant="outlined"
                      />
                    </Grid>
                  </Grid>
                  <CardActions>
                    <Button
                      type="submit"
                      variant="contained"
                      color="primary"
                      disabled={isSubmitting}
                    >
                      {selectedLeave ? "Update" : "Submit"}
                    </Button>
                    <Button
                      variant="contained"
                      color="secondary"
                      onClick={() => setShowForm(false)}
                    >
                      Cancel
                    </Button>
                  </CardActions>
                </Form>
              )}
            </Formik>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};

export default LeaveForm;
