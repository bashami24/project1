HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.

Unit testing of service classes
Logging within service classes

package org.example.Service;

import org.example.Model.Author;
import org.example.exception.AuthorNotFoundException;

import java.util.ArrayList;
import java.util.List;

public class AuthorService {

    private List<Author> authorList;
    private List<String> existingNames;

    public AuthorService() {
        this.authorList = new ArrayList<>();
        this.existingNames = new ArrayList<>();
    }

    public AuthorService(List<Author> authorList) {
        this.authorList = authorList;
        this.existingNames = new ArrayList<>();
        for (Author author : authorList) {
            existingNames.add(author.getName());
        }
    }

    public List<Author> getAllAuthors() {
        return authorList;
    }

    public void addAuthor(Author author) throws IllegalArgumentException {
        if (existingNames.contains(author.getName())) {
            throw new IllegalArgumentException("Author name must be unique");
        }
        authorList.add(author);
        existingNames.add(author.getName());
    }

    public Author getAuthorByName(String name) throws AuthorNotFoundException {
        for (Author author : authorList) {
            if (author.getName().equals(name)) {
                return author;
            }
        }
        throw new AuthorNotFoundException("Author with name '" + name + "' not found");
    }
}
