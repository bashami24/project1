import React, { useEffect, useState } from 'react';
import { Product } from '../models/Product';
import { getAllProductsAPI, addProductAPI, deleteProductAPI, updateProductAPI } from '../services/ProductService';

const ProductPage: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showMenuId, setShowMenuId] = useState<number | null>(null);
    const [newProduct, setNewProduct] = useState<{ name: string; price: string; seller: string }>({
        name: '',
        price: '',
        seller: ''
    });

    useEffect(() => {
        getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
    }, []);

    const toggleMenu = (productId: number) => {
        setShowMenuId((prevId) => (prevId === productId ? null : productId));
    };

    const handleDeleteProduct = (productId: number) => {
        deleteProductAPI(productId).then(() => {
            setProducts(products.filter(product => product.id !== productId));
            setShowMenuId(null);
        });
    };

    const handleUpdateProduct = (id: number, newName: string, newPrice: string, newSeller: string) => {
        updateProductAPI(id, newName, newPrice, newSeller).then(() => {
            setProducts(products.map(product => (product.id === id ? { ...product, name: newName, price: newPrice, seller: newSeller } : product)));
            setShowMenuId(null);
        });
    };

    const handleAddProduct = async () => {
        await addProductAPI(newProduct.name, newProduct.price, newProduct.seller);
        setNewProduct({ name: '', price: '', seller: '' });
        getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setNewProduct(prevState => ({ ...prevState, [name]: value }));
    };

    return (
        <div>
            <h1>Products</h1>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>
                        {product.name} - {product.price} - {product.seller}
                        <button onClick={() => toggleMenu(product.id)}>Toggle Menu</button>
                        {showMenuId === product.id && (
                            <div>
                                <input type="text" name="name" placeholder="New Name" onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })} />
                                <input type="text" name="price" placeholder="New Price" onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })} />
                                <input type="text" name="seller" placeholder="New Seller" onChange={(e) => setNewProduct({ ...newProduct, seller: e.target.value })} />
                                <button onClick={() => handleUpdateProduct(product.id, newProduct.name, newProduct.price, newProduct.seller)}>Update</button>
                                <button onClick={() => handleDeleteProduct(product.id)}>Delete</button>
                            </div>
                        )}
                    </li>
                ))}
            </ul>
            <h2>Add Product</h2>
            <form onSubmit={(e) => { e.preventDefault(); handleAddProduct(); }}>
                <label>
                    Name:
                    <input type="text" name="name" value={newProduct.name} onChange={handleChange} />
                </label>
                <label>
                    Price:
                    <input type="text" name="price" value={newProduct.price} onChange={handleChange} />
                </label>
                <label>
                    Seller:
                    <input type="text" name="seller" value={newProduct.seller} onChange={handleChange} />
                </label>
                <button type="submit">Add Product</button>
            </form>
        </div>
    );
};

export default ProductPage;
