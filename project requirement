

HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.



import org.h2.jdbcx.JdbcDataSource;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import static org.junit.Assert.*;

public class DAOTest {

    private JdbcDataSource dataSource;
    private Connection connection;
    private BookDAO bookDAO;
    private SellerDAO sellerDAO;

    @Before
    public void setUp() throws SQLException {
        dataSource = new JdbcDataSource();
        dataSource.setURL("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
        dataSource.setUser("sa");
        dataSource.setPassword("");

        connection = dataSource.getConnection();
        createTables();

        bookDAO = new BookDAO(connection);
        sellerDAO = new SellerDAO(connection);
    }

    @After
    public void tearDown() throws SQLException {
        dropTables();
        connection.close();
    }

    private void createTables() throws SQLException {
        PreparedStatement ps = connection.prepareStatement(
                "CREATE TABLE Book (id INT PRIMARY KEY, name VARCHAR(255), price DOUBLE, authorName VARCHAR(255))"
        );
        ps.executeUpdate();
        ps.close();

        ps = connection.prepareStatement(
                "CREATE TABLE Seller (id INT PRIMARY KEY, name VARCHAR(255))"
        );
        ps.executeUpdate();
        ps.close();
    }

    private void dropTables() throws SQLException {
        PreparedStatement ps = connection.prepareStatement("DROP TABLE IF EXISTS Book");
        ps.executeUpdate();
        ps.close();

        ps = connection.prepareStatement("DROP TABLE IF EXISTS Seller");
        ps.executeUpdate();
        ps.close();
    }

    @Test
    public void testBookCRUD() throws SQLException {
        // Insert
        Book book = new Book("Book1", 10.0, "Author1");
        bookDAO.insertBook(book);

        // Get
        Book retrievedBook = bookDAO.getBookById(book.getId());
        assertNotNull(retrievedBook);
        assertEquals(book.getName(), retrievedBook.getName());
        assertEquals(book.getPrice(), retrievedBook.getPrice(), 0.01);
        assertEquals(book.getAuthorName(), retrievedBook.getAuthorName());

        // Update
        book.setName("UpdatedBook");
        bookDAO.updateBook(book.getId(), book);
        retrievedBook = bookDAO.getBookById(book.getId());
        assertEquals(book.getName(), retrievedBook.getName());

        // Delete
        bookDAO.deleteBook(book.getId());
        retrievedBook = bookDAO.getBookById(book.getId());
        assertNull(retrievedBook);
    }

    @Test
    public void testSellerCRUD() throws SQLException {
        // Insert
        Seller seller = new Seller("Seller1");
        sellerDAO.insertSeller(seller);

        // Get
        Seller retrievedSeller = sellerDAO.getSellerById(seller.getId());
        assertNotNull(retrievedSeller);
        assertEquals(seller.getName(), retrievedSeller.getName());

        // Update
        seller.setName("UpdatedSeller");
        sellerDAO.updateSeller(seller.getId(), seller);
        retrievedSeller = sellerDAO.getSellerById(seller.getId());
        assertEquals(seller.getName(), retrievedSeller.getName());

        // Delete
        sellerDAO.deleteSeller(seller.getId());
        retrievedSeller = sellerDAO.getSellerById(seller.getId());
        assertNull(retrievedSeller);
    }

    @Test
    public void testGetAllBooksAndSellers() throws SQLException {
        // Insert some books and sellers
        Book book1 = new Book("Book1", 10.0, "Author1");
        Book book2 = new Book("Book2", 20.0, "Author2");
        bookDAO.insertBook(book1);
        bookDAO.insertBook(book2);

        Seller seller1 = new Seller("Seller1");
        Seller seller2 = new Seller("Seller2");
        sellerDAO.insertSeller(seller1);
        sellerDAO.insertSeller(seller2);

        // Get all books and sellers
        List<Book> books = bookDAO.getAllBooks();
        List<Seller> sellers = sellerDAO.getAllSellers();

        assertEquals(2, books.size());
        assertEquals(2, sellers.size());
    }
}

org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'BiniamAshami' (BOOK: ""PRODUCT_PRICE"" DECIMAL(10, 2) NOT NULL)"; SQL statement:
UPDATE BOOK SET name = ?, product_price = ?, Seller_Id = ? WHERE product_id = ? [22018-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:506)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.table.Column.getDataConversionError(Column.java:413)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:372)
	at org.h2.table.Table.convertUpdateRow(Table.java:968)
	at org.h2.command.dml.SetClauseList.prepareUpdate(SetClauseList.java:140)
	at org.h2.command.dml.Update.update(Update.java:88)
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:209)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:169)
	at org.example.DAO.BookDAO.updateBook(BookDAO.java:72)
	at org.example.Service.BookService.updateBook(BookService.java:55)
	at org.example.Controller.Controller.lambda$getAPI$4(Controller.java:72)
	at io.javalin.routing.HandlerEntry.handle(HandlerEntry.kt:19)
	at io.javalin.http.servlet.DefaultTasks.HTTP$lambda-8$lambda-6$lambda-5(DefaultTasks.kt:35)
	at io.javalin.http.servlet.JavalinServlet.handleTask(JavalinServlet.kt:79)
	at io.javalin.http.servlet.JavalinServlet.handleSync(JavalinServlet.kt:46)
	at io.javalin.http.servlet.JavalinServlet.service(JavalinServlet.kt:34)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:587)
	at io.javalin.jetty.JavalinJettyServlet.service(JavalinJettyServlet.kt:58)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:587)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:764)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:529)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:221)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1571)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:221)
	at io.javalin.jetty.JettyServer$start$wsAndHttpHandler$1.doHandle(JettyServer.kt:57)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:176)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:484)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1544)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:174)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1302)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:129)
	at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:173)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:122)
	at org.eclipse.jetty.server.Server.handle(Server.java:563)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$0(HttpChannel.java:505)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:762)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:497)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:282)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:314)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:100)
	at org.eclipse.jetty.io.SelectableChannelEndPoint$1.run(SelectableChannelEndPoint.java:53)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.runTask(AdaptiveExecutionStrategy.java:421)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.consumeTask(AdaptiveExecutionStrategy.java:390)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.tryProduce(AdaptiveExecutionStrategy.java:277)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.produce(AdaptiveExecutionStrategy.java:199)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:933)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1077)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.h2.message.DbException: Data conversion error converting "BiniamAshami" [22018-214]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.value.ValueStringBase.getBigDecimal(ValueStringBase.java:151)
	at org.h2.value.Value.convertToNumeric(Value.java:1678)
	at org.h2.value.Value.convertTo(Value.java:1139)
	at org.h2.value.Value.convertForAssignTo(Value.java:1092)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:369)
	... 48 more
Caused by: org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "BiniamAshami" [22018-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:506)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	... 54 more
Caused by: java.lang.NumberFormatException: Character B is neither a decimal digit number, decimal point, nor "e" notation exponential mark.
	at java.base/java.math.BigDecimal.<init>(BigDecimal.java:522)
	at java.base/java.math.BigDecimal.<init>(BigDecimal.java:405)
	at java.base/java.math.BigDecimal.<init>(BigDecimal.java:838)
	at org.h2.value.ValueStringBase.getBigDecimal(ValueStringBase.java:149)
	... 52 more
