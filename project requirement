import React, { useState, useEffect } from "react";
import {
  Grid,
  makeStyles,
  Card,
  CardContent,
  MenuItem,
  InputLabel,
  Select,
  CardActions,
  Button,
  CardHeader,
  FormControl,
} from "@material-ui/core";

import { Formik, Form, Field } from "formik";
import * as Yup from "yup";
import { TextField } from "formik-material-ui";
import { Leaves } from "../Models/Leaves";
import { postLeaveAPI, deleteLeaveAPI, updateLeaveAPI } from "../Services/LeavesAPI";
import { toast } from "react-toastify";
import { Employee } from "../Models/Employee";

const useStyle = makeStyles((theme) => ({
  padding: {
    padding: theme.spacing(3),
  },
  button: {
    margin: theme.spacing(1),
  },
}));

const LeaveForm: React.FC<LeaveFormProps> = ({
  employee,
  setAllLeaves,
  allLeaves,
  setShowForm,
}) => {
  const [otherLeaveType, setOtherLeaveType] = React.useState("");
  const [leaveToUpdate, setLeaveToUpdate] = React.useState<Leaves | null>(null);

  useEffect(() => {
    if (leaveToUpdate) {
      setInitialValues(leaveToUpdate);
    }
  }, [leaveToUpdate]);

  const setInitialValues = (leave: Leaves) => {
    formik.setValues({
      leaveName: leave.leaveName,
      startDate: leave.startDate,
      endDate: leave.endDate,
      acceptedFlag: leave.acceptedFlag,
      activeFlag: leave.activeFlag,
      employeeID: leave.employeeID,
      managerID: leave.managerID,
    });
  };

  const handleSubmit = async (values: any) => {
    if (leaveToUpdate) {
      const updatedLeaves = allLeaves.map((leave) =>
        leave === leaveToUpdate ? { ...leave, ...values } : leave
      );
      setAllLeaves(updatedLeaves);
      setLeaveToUpdate(null);
      toast.success("Leave Updated Successfully");
      return;
    }

    if (otherLeaveType === "") values.leaveName = values.leaveName;
    else values.leaveName = otherLeaveType;

    const response = await postLeaveAPI(values, employee.employeeID);
    if (response) {
      setAllLeaves([...allLeaves, values]);
      setShowForm(false);
      toast.success("Leave Requested Successfully");
    } else {
      toast.error("Error Requesting Leave");
    }
  };

  const handleDelete = async (leaveId: number) => {
    const response = await deleteLeaveAPI(leaveId);
    if (response) {
      const updatedLeaves = allLeaves.filter((leave) => leave.leaveId !== leaveId);
      setAllLeaves(updatedLeaves);
      toast.success("Leave Deleted Successfully");
    } else {
      toast.error("Error Deleting Leave");
    }
  };

  const handleUpdate = (leave: Leaves) => {
    setLeaveToUpdate(leave);
  };

  return (
    <Grid container justify="center" spacing={2}>
      <Grid item xs={12} md={6}>
        <Card>
          <CardHeader title="Leave Request Form" />
          <CardContent>
            <Formik
              initialValues={initialValues}
              validationSchema={validationSchema}
              onSubmit={(values, { setSubmitting }) => {
                handleSubmit(values);
                setSubmitting(false);
              }}
            >
              {(formik) => (
                <Form>
                  <Grid container spacing={2}>
                    ...
                  </Grid>
                </Form>
              )}
            </Formik>
          </CardContent>
        </Card>
      </Grid>
      {allLeaves.map((leave) => (
        <Grid item xs={12} md={6} key={leave.leaveId}>
          <Card>
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <FormControl fullWidth variant="outlined">
                    <InputLabel>Leave Type</InputLabel>
                    <Select
                      name="leaveName"
                      label="Leave Type"
                      value={leave.leaveName}
                      disabled
                    />
                  </FormControl>
                </Grid>
                ...
              </Grid>
            </CardContent>
            <CardActions>
              <Button
                color="primary"
                onClick={() => handleUpdate(leave)}
              >
                Update
              </Button>
              <Button
                color="secondary"
                onClick={() =>
