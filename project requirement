

HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.


public void insertBook(Book b){
        try{
            PreparedStatement ps = conn.prepareStatement("insert into Product" +
                    " (product_id, name, product_price, Seller_id) " +
                    "values (?, ?, ?, ?)");
            ps.setLong(1, b.getId());
            ps.setString(2, b.getName());
            ps.setDouble(3, b.getPrice());
            ps.setInt(4, b.getSellerId());
            ps.executeUpdate();
        }catch(SQLException e){
            e.printStackTrace();
        }
    }
    public List<Book> getAllBooks(){
        List<Book> resultBook = new ArrayList<>();
        try{
            PreparedStatement ps = conn.prepareStatement("select * from Product");
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
                int id = rs.getInt("product_id");
                String Name = rs.getString("name");
                double Price = rs.getDouble("product_price");
                int SellerId = rs.getInt("Seller_id");
                Book  b = new Book(id, Name, Price, SellerId);
                resultBook.add(b);
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        return resultBook;
    }
