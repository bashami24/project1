



HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.



//Navigation bar
// components/ProductList.tsx

import React, { useState } from 'react';
import { Product } from '../models/Product';

interface ProductListProps {
    products: Product[];
    toggleProductMenu: (productId: number) => void;
    showProductMenu: number | null;
    handleDeleteProduct: (productId: number) => void;
    handleUpdateProduct: (productId: number, newName: string, newPrice: number, newSellerId: number) => void;
    handleAddProduct: (name: string, price: number, sellerId: number) => void; // Add this prop
}

const ProductList: React.FC<ProductListProps> = ({ products, toggleProductMenu, showProductMenu, handleDeleteProduct, handleUpdateProduct, handleAddProduct }) => {
    const [newProductName, setNewProductName] = useState('');
    const [newProductPrice, setNewProductPrice] = useState<number | ''>('');
    const [newProductSellerId, setNewProductSellerId] = useState<number | ''>('');

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        if (name === 'newProductName') setNewProductName(value);
        if (name === 'newProductPrice') setNewProductPrice(value === '' ? '' : parseFloat(value));
        if (name === 'newProductSellerId') setNewProductSellerId(value === '' ? '' : parseInt(value));
    };

    const handleAdd = () => {
        handleAddProduct(newProductName, newProductPrice as number, newProductSellerId as number);
        setNewProductName('');
        setNewProductPrice('');
        setNewProductSellerId('');
    };

    return (
        <ul>
            {products.map((product) => (
                <li key={product.id}>
                    {product.name}{' '}
                    <button onClick={() => toggleProductMenu(product.id)}>
                        {showProductMenu === product.id ? 'Hide' : 'Show'} Menu
                    </button>
                    {showProductMenu === product.id && (
                        <div>
                            <button onClick={() => handleUpdateProduct(product.id, newProductName, newProductPrice as number, newProductSellerId as number)}>Update</button>
                            <button onClick={() => handleDeleteProduct(product.id)}>Delete</button>
                        </div>
                    )}
                </li>
            ))}
            <li>
                <h3>Add New Product</h3>
                <input type="text" name="newProductName" placeholder="Enter product name" value={newProductName} onChange={handleChange} />
                <input type="number" name="newProductPrice" placeholder="Enter product price" value={newProductPrice} onChange={handleChange} />
                <input type="number" name="newProductSellerId" placeholder="Enter seller ID" value={newProductSellerId} onChange={handleChange} />
                <button onClick={handleAdd}>Add Product</button>
            </li>
        </ul>
    );
};

export default ProductList;


// pages/ProductPage.tsx

const ProductPage: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showProductMenu, setShowProductMenu] = useState<number | null>(null);

    useEffect(() => {
        getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
    }, []);

    const handleDeleteProduct = (productId: number) => {
        deleteProductAPI(productId).then(() => {
            getAllProductsAPI().then(response => response.json()).then(data => {
                setProducts(data);
                setShowProductMenu(null);
            });
        });
    };

    const handleUpdateProduct = (productId: number, newName: string, newPrice: number, newSellerId: number) => {
        // Implement the update functionality here
        console.log(`Update product ${productId} with name ${newName}, price ${newPrice}, and sellerId ${newSellerId}`);
        // You should replace the console.log with your actual update logic
    };

    const handleAddProduct = (name: string, price: number, sellerId: number) => {
        addProductAPI(name, price, sellerId).then(() => {
            getAllProductsAPI().then(response => response.json()).then(data => {
                setProducts(data);
                setShowProductMenu(null);
            });
        });
    };

    return (
        <div>
            <h1>Products</h1>
            <ProductList
                products={products}
                toggleProductMenu={(productId) =>
                    setShowProductMenu((prevId) => (prevId === productId ? null : productId))
                }
                showProductMenu={showProductMenu}
                handleDeleteProduct={handleDeleteProduct}
                handleUpdateProduct={handleUpdateProduct}
                handleAddProduct={handleAddProduct} // Pass the handleAddProduct function
            />
        </div>
    );
};

export default ProductPage;

// components/ProductList.tsx

interface ProductListProps {
    products: Product[];
    onToggleMenu: (productId: number) => void;
    showMenuId: number | null;
    handleDeleteProduct: (productId: number) => void;
    handleUpdateProduct: (productId: number, newName: string, newPrice: number, newSellerId: number) => void;
}

const ProductList: React.FC<ProductListProps> = ({ products, onToggleMenu, showMenuId, handleDeleteProduct, handleUpdateProduct }) => {
    return (
        <ul>
            {products.map((product) => (
                <li key={product.id}>
                    {product.name}{' '}
                    <button onClick={() => onToggleMenu(product.id)}>
                        {showMenuId === product.id ? 'Hide' : 'Show'} Menu
                    </button>
                    {showMenuId === product.id && (
                        <div>
                            <button onClick={() => handleUpdateProduct(product.id, 'New Name', 0, 0)}>Update</button>
                            <button onClick={() => handleDeleteProduct(product.id)}>Delete</button>
                        </div>
                    )}
                </li>
            ))}
        </ul>
    );
};

export default ProductList;




// pages/ProductPage.tsx

const ProductPage: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showMenuId, setShowMenuId] = useState<number | null>(null);

    useEffect(() => {
        getAllProductsAPI().then(data => setProducts(data));
    }, []);

    const toggleMenu = (productId: number) => {
        setShowMenuId((prevId) => (prevId === productId ? null : productId));
    };

    const handleDeleteProduct = (productId: number) => {
        deleteProductAPI(productId).then(() => {
            getAllProductsAPI().then(data => setProducts(data));
            setShowMenuId(null);
        });
    };

    const handleUpdateProduct = (productId: number, newName: string, newPrice: number, newSellerId: number) => {
        updateProductAPI(productId, newName, newPrice, newSellerId).then(() => {
            getAllProductsAPI().then(data => setProducts(data));
            setShowMenuId(null);
        });
    };

    return (
        <div>
            <h1>Products</h1>
            <ProductList
                products={products}
                onToggleMenu={toggleMenu}
                showMenuId={showMenuId}
                handleDeleteProduct={handleDeleteProduct}
                handleUpdateProduct={handleUpdateProduct}
            />
        </div>
    );
};

export default ProductPage;


// services/ProductService.ts

export const updateProductAPI = async (productId: number, newName: string, newPrice: number, newSellerId: number): Promise<void> => {
    try {
        await fetch(`${API_URL}/products/${productId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name: newName, price: newPrice, sellerId: newSellerId })
        });
    } catch (error) {
        console.error('Error updating product:', error);
        throw error;
    }
};

// pages/ProductPage.tsx

const ProductPage: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [newProduct, setNewProduct] = useState<{ name: string; price: number; sellerId: number }>({
        name: '',
        price: 0,
        sellerId: 0
    });

    useEffect(() => {
        getAllProductsAPI().then(data => setProducts(data));
    }, []);

    const handleAddProduct = async () => {
        await addProductAPI(newProduct.name, newProduct.price, newProduct.sellerId);
        setNewProduct({ name: '', price: 0, sellerId: 0 });
        getAllProductsAPI().then(data => setProducts(data));
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setNewProduct(prevState => ({ ...prevState, [name]: name === 'price' || name === 'sellerId' ? parseInt(value) : value }));
    };

    return (
        <div>
            <h1>Products</h1>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>
                        {product.name} - {product.price} - {product.sellerId}
                    </li>
                ))}
            </ul>
            <h2>Add Product</h2>
            <form onSubmit={(e) => { e.preventDefault(); handleAddProduct(); }}>
                <label>
                    Name:
                    <input type="text" name="name" value={newProduct.name} onChange={handleChange} />
                </label>
                <label>
                    Price:
                    <input type="number" name="price" value={newProduct.price} onChange={handleChange} />
                </label>
                <label>
                    Seller ID:
                    <input type="number" name="sellerId" value={newProduct.sellerId} onChange={handleChange} />
                </label>
                <button type="submit">Add Product</button>
            </form>
        </div>
    );
};

export default ProductPage;
