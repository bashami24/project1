import React, { useEffect, useState } from 'react';
import { Product } from '../models/Product';
import { getAllProductsAPI, addProductAPI, deleteProductAPI, updateProductAPI } from '../services/ProductService';

const ProductPage: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showMenuId, setShowMenuId] = useState<number | null>(null);
    const [newProduct, setNewProduct] = useState<{ name: string; price: number; seller: number }>({
        name: '',
        price: 0,
        seller: 0
    });
    const [deleteProductId, setDeleteProductId] = useState<number | null>(null);
    const [updateProductId, setUpdateProductId] = useState<number | null>(null);

    useEffect(() => {
        getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
    }, []);

    const toggleMenu = (productId: number) => {
        setShowMenuId((prevId) => (prevId === productId ? null : productId));
    };

    const handleDeleteProduct = () => {
        if (deleteProductId) {
            deleteProductAPI(deleteProductId).then(() => {
                getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
                setShowMenuId(null);
                setDeleteProductId(null);
            });
        }
    };

    const handleUpdateProduct = () => {
        if (updateProductId) {
            updateProductAPI(updateProductId, newProduct.name, newProduct.price, newProduct.seller).then(() => {
                getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
                setShowMenuId(null);
                setUpdateProductId(null);
            });
        }
    };

    const handleAddProduct = async () => {
        await addProductAPI(newProduct.name, newProduct.price, newProduct.seller);
        setNewProduct({ name: '', price: 0, seller: 0 });
        getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setNewProduct(prevState => ({ ...prevState, [name]: name === 'price' || name === 'seller' ? parseInt(value) : value }));
    };

    return (
        <div>
            <h1>Products</h1>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>
                        {product.name} - {product.price} - {product.seller}
                        <button onClick={() => toggleMenu(product.id)}>Toggle Menu</button>
                        {showMenuId === product.id && (
                            <div>
                                <button onClick={() => setUpdateProductId(product.id)}>Update</button>
                                <button onClick={() => setDeleteProductId(product.id)}>Delete</button>
                            </div>
                        )}
                    </li>
                ))}
            </ul>
            {deleteProductId && (
                <div>
                    <p>Are you sure you want to delete this product?</p>
                    <button onClick={handleDeleteProduct}>Yes</button>
                    <button onClick={() => setDeleteProductId(null)}>No</button>
                </div>
            )}
            {updateProductId && (
                <div>
                    <input type="text" placeholder="New Name" value={newProduct.name} onChange={(e) => setNewProduct(prevState => ({ ...prevState, name: e.target.value }))} />
                    <input type="number" placeholder="New Price" value={newProduct.price} onChange={(e) => setNewProduct(prevState => ({ ...prevState, price: parseInt(e.target.value) || 0 }))} />
                    <input type="number" placeholder="New Seller ID" value={newProduct.seller} onChange={(e) => setNewProduct(prevState => ({ ...prevState, seller: parseInt(e.target.value) || 0 }))} />
                    <button onClick={handleUpdateProduct}>Update</button>
                </div>
            )}
            <h2>Add Product</h2>
            <form onSubmit={(e) => { e.preventDefault(); handleAddProduct(); }}>
                <label>
                    Name:
                    <input type="text" name="name" value={newProduct.name} onChange={handleChange} />
                </label>
                <label>
                    Price:
                    <input type="number" name="price" value={newProduct.price} onChange={handleChange} />
                </label>
                <label>
                    Seller ID:
                    <input type="number" name="seller" value={newProduct.seller} onChange={handleChange} />
                </label>
                <button type="submit">Add Product</button>
            </form>
        </div>
    );
};

export default ProductPage;
