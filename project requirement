

HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.



import org.h2.jdbcx.JdbcDataSource;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import static org.junit.Assert.*;

public class DAOTest {

    private JdbcDataSource dataSource;
    private Connection connection;
    private BookDAO bookDAO;
    private SellerDAO sellerDAO;

    @Before
    public void setUp() throws SQLException {
        dataSource = new JdbcDataSource();
        dataSource.setURL("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
        dataSource.setUser("sa");
        dataSource.setPassword("");

        connection = dataSource.getConnection();
        createTables();

        bookDAO = new BookDAO(connection);
        sellerDAO = new SellerDAO(connection);
    }

    @After
    public void tearDown() throws SQLException {
        dropTables();
        connection.close();
    }

    private void createTables() throws SQLException {
        PreparedStatement ps = connection.prepareStatement(
                "CREATE TABLE Book (id INT PRIMARY KEY, name VARCHAR(255), price DOUBLE, authorName VARCHAR(255))"
        );
        ps.executeUpdate();
        ps.close();

        ps = connection.prepareStatement(
                "CREATE TABLE Seller (id INT PRIMARY KEY, name VARCHAR(255))"
        );
        ps.executeUpdate();
        ps.close();
    }

    private void dropTables() throws SQLException {
        PreparedStatement ps = connection.prepareStatement("DROP TABLE IF EXISTS Book");
        ps.executeUpdate();
        ps.close();

        ps = connection.prepareStatement("DROP TABLE IF EXISTS Seller");
        ps.executeUpdate();
        ps.close();
    }

    @Test
    public void testBookCRUD() throws SQLException {
        // Insert
        Book book = new Book("Book1", 10.0, "Author1");
        bookDAO.insertBook(book);

        // Get
        Book retrievedBook = bookDAO.getBookById(book.getId());
        assertNotNull(retrievedBook);
        assertEquals(book.getName(), retrievedBook.getName());
        assertEquals(book.getPrice(), retrievedBook.getPrice(), 0.01);
        assertEquals(book.getAuthorName(), retrievedBook.getAuthorName());

        // Update
        book.setName("UpdatedBook");
        bookDAO.updateBook(book.getId(), book);
        retrievedBook = bookDAO.getBookById(book.getId());
        assertEquals(book.getName(), retrievedBook.getName());

        // Delete
        bookDAO.deleteBook(book.getId());
        retrievedBook = bookDAO.getBookById(book.getId());
        assertNull(retrievedBook);
    }

    @Test
    public void testSellerCRUD() throws SQLException {
        // Insert
        Seller seller = new Seller("Seller1");
        sellerDAO.insertSeller(seller);

        // Get
        Seller retrievedSeller = sellerDAO.getSellerById(seller.getId());
        assertNotNull(retrievedSeller);
        assertEquals(seller.getName(), retrievedSeller.getName());

        // Update
        seller.setName("UpdatedSeller");
        sellerDAO.updateSeller(seller.getId(), seller);
        retrievedSeller = sellerDAO.getSellerById(seller.getId());
        assertEquals(seller.getName(), retrievedSeller.getName());

        // Delete
        sellerDAO.deleteSeller(seller.getId());
        retrievedSeller = sellerDAO.getSellerById(seller.getId());
        assertNull(retrievedSeller);
    }

    @Test
    public void testGetAllBooksAndSellers() throws SQLException {
        // Insert some books and sellers
        Book book1 = new Book("Book1", 10.0, "Author1");
        Book book2 = new Book("Book2", 20.0, "Author2");
        bookDAO.insertBook(book1);
        bookDAO.insertBook(book2);

        Seller seller1 = new Seller("Seller1");
        Seller seller2 = new Seller("Seller2");
        sellerDAO.insertSeller(seller1);
        sellerDAO.insertSeller(seller2);

        // Get all books and sellers
        List<Book> books = bookDAO.getAllBooks();
        List<Seller> sellers = sellerDAO.getAllSellers();

        assertEquals(2, books.size());
        assertEquals(2, sellers.size());
    }
}

 public void insertBook(Book b){
        try{
            PreparedStatement ps = conn.prepareStatement("insert into book" +
                    " (product_id,name, product_price, Seller_id) " +
                    "values (?,?, ?, ?)", Statement.RETURN_GENERATED_KEYS);
            //ps.setLong(1, b.getId());
            ps.setString(1, b.getName());
            ps.setDouble(2, b.getPrice());
            ps.setInt(3, b.getSellerId());
            ps.executeUpdate();
            ResultSet rs = ps.getGeneratedKeys();
            if (rs.next()) { int id = rs.getInt(1);
                b.setId(id);}
        }catch(SQLException e){
            e.printStackTrace();
        }
    }
