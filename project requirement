import React from "react";
import { Grid, makeStyles, Card, CardContent, MenuItem, InputLabel, Select, CardActions, Button, CardHeader, FormControl } from "@material-ui/core";
import { Formik, Form, Field } from "formik";
import * as Yup from "yup";
import { TextField } from "formik-material-ui";
import { Leaves } from "../Models/Leaves";
import { postLeaveAPI, updateLeaveAPI } from "../Services/LeavesAPI";
import { toast } from "react-toastify";

const useStyle = makeStyles((theme) => ({
  padding: {
    padding: theme.spacing(3),
  },
  button: {
    margin: theme.spacing(1),
  },
}));

const initialValues: Leaves = {
  leaveName: "",
  startDate: null,
  endDate: null,
  acceptedFlag: false,
  activeFlag: true,
  employeeID: undefined,
  managerID: undefined,
};

const options = [
  { label: "Sick Leave", value: "Sick Leave" },
  { label: "Vacation", value: "Vacation" },
  { label: "Other", value: "Other" },
];

const today = new Date(Date.now());
today.setHours(0, 0, 0, 0);

const validationSchema = Yup.object({
  leaveName: Yup.string().required("Leave type is required"),
  startDate: Yup.date()
    .nullable()
    .required("Start date is required")
    .min(today, "Start date can't be before today"),
  endDate: Yup.date()
    .nullable()
    .required("End date is required")
    .min(Yup.ref("startDate"), "End date can't be before start date"),
});

interface LeaveFormProps {
  employeeId: number;
  setAllLeaves: any;
  allLeaves: Leaves[];
}

const LeaveForm: React.FC<LeaveFormProps> = ({ employeeId, setAllLeaves, allLeaves }) => {
  const handleSubmit = async (values: Leaves) => {
    if (values.id) {
      const response = await updateLeaveAPI(employeeId, values.id, values);
      if (response) {
        const updatedLeaves = allLeaves.map((leave) => (leave.Id === values.id ? values : leave));
        setAllLeaves(updatedLeaves);
        toast.success("Leave updated successfully");
      } else {
        toast.error("Error updating leave");
      }
    } else {
      const response = await postLeaveAPI(values, employeeId);
      if (response) {
        setAllLeaves([...allLeaves, values]);
        toast.success("Leave requested successfully");
      } else {
        toast.error("Error requesting leave");
      }
    }
  };

  return (
    <Grid container justify="center" spacing={2}>
      <Grid item xs={12} md={6}>
        <Card>
          <CardHeader title="Leave Request Form" />
          <CardContent>
            <Formik
              initialValues={initialValues}
              validationSchema={validationSchema}
              onSubmit={(values, { setSubmitting }) => {
                handleSubmit(values);
                setSubmitting(false);
              }}
            >
              {({ values, setFieldValue }) => (
                <Form>
                  <Grid container spacing={2}>
                    {/* Leave form fields */}
                  </Grid>
                  <CardActions>
                    <Button type="submit" variant="contained" color="primary">Submit</Button>
                  </CardActions>
                </Form>
              )}
            </Formik>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};

export default LeaveForm;
