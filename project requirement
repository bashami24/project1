
COMPONENTS

import React, { SyntheticEvent, useState } from "react";
import { postSomeSeller } from "../Services/SellerAPIService";
import { Seller } from "../models/Seller";


export function SellerSubmit(){
    const [nameInput, setNameInput] = useState<string>("");
    function nameInputHandler(event: SyntheticEvent) {
      let textBox = event.target as HTMLTextAreaElement;
      setNameInput(textBox.value);
    }
    const [idInput, setIdInput] = useState<string>("");
    function idInputHandler(event: SyntheticEvent) {
      let textBox = event.target as HTMLTextAreaElement;
      setIdInput(textBox.value);
    }
  
    function buttonClickHandler() {
      let seller: Seller = {
        id: parseInt(idInput),
        name: nameInput,
      };
      postSomeSeller(seller);
    }
  
    return (
      <form onSubmit={buttonClickHandler}>
        <h1>Enter New Seller</h1>
        <input
          onChange={idInputHandler}
          value={idInput}
          placeholder="Enter Seller ID"
        ></input>
        <input
          onChange={nameInputHandler}
          value={nameInput}
          placeholder="Enter Seller Name"
        ></input>
        <button type="submit">Submit</button>
        </form>
    ); 
  }


import React, { useEffect, useState } from 'react';
import { Product } from '../models/Product';
import { getAllProductsAPI, deleteProductAPI, addProductAPI } from '../services/ProductService';

const ProductList: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showMenuId, setShowMenuId] = useState<number | null>(null);
    const [newProduct, setNewProduct] = useState<{  name: string; price: number; seller: number }>({
        name: '',
        price: 0,
        seller: 0
    });

    useEffect(() => {
        getAllProductsAPI().then(response=> response.json()).then(data => setProducts(data));
    }, []);

    const toggleMenu = (id: number) => {
        setShowMenuId((prevId) => (prevId === id ? null : id));
    };

    const handleDeleteProduct = async (productId: number) => {
        await deleteProductAPI(productId);
        getAllProductsAPI().then(response=> response.json()).then(data => setProducts(data));
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setNewProduct(prevState => ({ ...prevState, [name]: name === 'price' || name === 'seller' || name === 'id' ? parseInt(value) ||'': value }));
    };

    const handleAddProduct = async () => {
        await addProductAPI( newProduct.name, newProduct.price, newProduct.seller);
        setNewProduct({ name: '', price: 0, seller: 0 });
        getAllProductsAPI().then(response=> response.json()).then(data => setProducts(data));
    };

    return (
        <div>
            <h2>All Products</h2>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>
                        {product.name} - {product.price} - {product.seller}
                        <button onClick={() => toggleMenu(product.id)}>Toggle Menu</button>
                        {showMenuId === product.id && (
                            <div>
                                <button onClick={() => console.log(`Update product ${product.id}`)}>Update</button>
                                <button onClick={() => handleDeleteProduct(product.id)}>Delete</button>
                            </div>
                        )}
                    </li>
                ))}
            </ul>
            <h2>Add Product</h2>
            <form onSubmit={(e) => { e.preventDefault(); handleAddProduct(); }}>
                <label> 
                    Name:
                    <input type="text" name="name" value={newProduct.name} onChange={handleChange} />
                </label>
                <label>
                    Price:
                    <input type="number" name="price" value={newProduct.price||''} onChange={handleChange} />
                </label>
                <label>
                    Seller ID:
                    <input type="number" name="seller" value={newProduct.seller||''} onChange={handleChange} />
                </label>
                <button type="submit">Add Product</button>
            </form>
        </div>
    );
};

export default ProductList;


import React from 'react';
import { Seller } from '../models/Seller';

interface SellerListProps {
    sellers: Seller[];
}

const SellerList: React.FC<SellerListProps> = ({ sellers }) => {
    return (
        <div>
            <h2>All Sellers</h2>
            <ul>
                {sellers.map((seller) => (
                    <li key={seller.id}>{seller.name}</li>
                ))}
            </ul>
        </div>
    );
};

export default SellerList;

SERVICES
const apiBaseURL = "http://localhost:9017/";

export function getAllProductsAPI() {
    return fetch(apiBaseURL + "product", {
        method: "GET",
        mode: "cors"
    });
}

export function addProductAPI( Name: string, price: number, sellerId: number) {
    return fetch(apiBaseURL + "product", {
        method: "POST",
        mode: "cors",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: Name, price, sellerId })
    });
}

export function deleteProductAPI(id: number){
    return fetch (apiBaseURL + `product/${id}`,{
        method:"DELETE",
        mode: "cors"
    });
}

export const updateProductAPI = async (newid: number, newName: string, newPrice: number, newSellerId: number): Promise<void> => {
    try {
        await fetch(`${apiBaseURL}/products/${newid}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: newid, name: newName, price: newPrice, sellerId: newSellerId })
        });
    } catch (error) {
        console.error('Error updating product:', error);
        throw error;
    }
};


import { Seller } from '../models/Seller';

const apiBaseURL = "http://localhost:9017/";

export function getAllSellersAPI() {
    return fetch(apiBaseURL + "seller", {
        method: "GET",
        mode: "cors"
    });
}

export function addSellerAPI(name: string, id: number) {
    return fetch(apiBaseURL + "seller", {
        method: "POST",
        mode: "cors",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, id })
    });
}

pages 

import React from 'react';

const HomePage: React.FC = () => {
    return (
        <div>
            <h1>Welcome to the Home Page</h1>
            <p>This is the landing page of your application.</p>
        </div>
    );
};

export default HomePage;

import React, { useEffect, useState } from 'react';
import { Product } from '../models/Product';
import { getAllProductsAPI, addProductAPI, deleteProductAPI, updateProductAPI } from '../services/ProductService';

const ProductPage: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showMenuId, setShowMenuId] = useState<number | null>(null);
    const [newProduct, setNewProduct] = useState<{ name: string; price: number; seller: number }>({
        name: '',
        price: 0,
        seller: 0
    });

    useEffect(() => {
        getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
    }, []);

    const toggleMenu = (productId: number) => {
        setShowMenuId((prevId) => (prevId === productId ? null : productId));
    };

    const handleDeleteProduct = (productId: number) => {
        deleteProductAPI(productId).then(() => {
            getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
            setShowMenuId(null);
        });
    };

    const handleUpdateProduct = (id: number, newName: string, newPrice: number, newSeller: number) => {
        updateProductAPI(id, newName, newPrice, newSeller).then(() => {
            getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
            setShowMenuId(null);
        });
    };

    const handleAddProduct = async () => {
        await addProductAPI(newProduct.name, newProduct.price, newProduct.seller);
        setNewProduct({ name: '', price: 0, seller: 0 });
        getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setNewProduct(prevState => ({ ...prevState, [name]: name === 'price' || name === 'seller' ? parseInt(value) : value }));
    };

    return (
        <div>
            <h1>Products</h1>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>
                        {product.name} - {product.price} - {product.seller}
                        <button onClick={() => toggleMenu(product.id)}>Toggle Menu</button>
                        {showMenuId === product.id && (
                            <div>
                                <button onClick={() => handleUpdateProduct(product.id, 'New Name', 0, 0)}>Update</button>
                                <button onClick={() => handleDeleteProduct(product.id)}>Delete</button>
                            </div>
                        )}
                    </li>
                ))}
            </ul>
            <h2>Add Product</h2>
            <form onSubmit={(e) => { e.preventDefault(); handleAddProduct(); }}>
                <label>
                    Name:
                    <input type="text" name="name" value={newProduct.name} onChange={handleChange} />
                </label>
                <label>
                    Price:
                    <input type="number" name="price" value={newProduct.price} onChange={handleChange} />
                </label>
                <label>
                    Seller ID:
                    <input type="number" name="seller" value={newProduct.seller} onChange={handleChange} />
                </label>
                <button type="submit">Add Product</button>
            </form>
        </div>
    );
};

export default ProductPage;

import React, { useEffect, useState } from 'react';
import SellerList from '../components/SellerList';
import { getAllSellersAPI, addSellerAPI } from '../services/SellerService';
import { Seller } from '../models/Seller';

const SellerPage: React.FC = () => {
    const [sellers, setSellers] = useState<Seller[]>([]);
    const [showAddSellerForm, setShowAddSellerForm] = useState(false);
    const [newSellerName, setNewSellerName] = useState('');
    const [newSellerId, setNewSellerId] = useState(0);

    useEffect(() => {
        getAllSellersAPI().then(response => response.json()).then(data => setSellers(data));
    }, []);

    const handleAddSeller = () => {
        addSellerAPI(newSellerName,newSellerId).then(() => {
            getAllSellersAPI().then(response => response.json()).then(data => {
                setSellers(data);
                setShowAddSellerForm(false);
                setNewSellerName('');
                setNewSellerId(0);
            });
        });
    };

    return (
        <div>
            <h1>Sellers</h1>
            <SellerList sellers={sellers} />
            {showAddSellerForm ? (
                <div>
                    <input
                        type="text"
                        placeholder="Enter seller name"
                        value={newSellerName}
                        onChange={(e) => setNewSellerName(e.target.value)}
                    />
                    <input
                    type="number"
                    placeholder='Enter Seller Id'
                    value={newSellerId}
                    onChange={(e) => setNewSellerId(parseInt(e.target.value))}/>
                    <button onClick={handleAddSeller}>Add Seller</button>
                </div>
            ) : (
                <button onClick={() => setShowAddSellerForm(true)}>Add New Seller</button>
            )}
        </div>
    );
};

export default SellerPage;


SERVICES

const apiBaseURL = "http://localhost:9017/";

export function getAllProductsAPI() {
    return fetch(apiBaseURL + "product", {
        method: "GET",
        mode: "cors"
    });
}

export function addProductAPI( Name: string, price: number, sellerId: number) {
    return fetch(apiBaseURL + "product", {
        method: "POST",
        mode: "cors",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: Name, price, sellerId })
    });
}

export function deleteProductAPI(id: number){
    return fetch (apiBaseURL + `product/${id}`,{
        method:"DELETE",
        mode: "cors"
    });
}

export const updateProductAPI = async (newid: number, newName: string, newPrice: number, newSellerId: number): Promise<void> => {
    try {
        await fetch(`${apiBaseURL}/products/${newid}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: newid, name: newName, price: newPrice, sellerId: newSellerId })
        });
    } catch (error) {
        console.error('Error updating product:', error);
        throw error;
    }
};


import { Seller } from '../models/Seller';

const apiBaseURL = "http://localhost:9017/";

export function getAllSellersAPI() {
    return fetch(apiBaseURL + "seller", {
        method: "GET",
        mode: "cors"
    });
}

export function addSellerAPI(name: string, id: number) {
    return fetch(apiBaseURL + "seller", {
        method: "POST",
        mode: "cors",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, id })
    });
}


