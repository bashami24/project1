HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.

Unit testing of service classes
Logging within service classes

        api.put("books/{id}", context -> {
            long id = Long.parseLong(context.pathParam("id"));
            try {
                ObjectMapper om = new ObjectMapper();
                Book updatedBook = om.readValue(context.body(), Book.class);
                bookService.updateBook(id, updatedBook);
                context.status(200);
            } catch (JsonProcessingException | BookNotFoundException e) {
                context.status(400);
            }
        });

        api.delete("books/{id}", context -> {
            long id = Long.parseLong(context.pathParam("id"));
            try {
                bookService.deleteBook(id);
                context.status(200);
            } catch (BookNotFoundException e) {
                context.status(404);
            }
        });

///////////////////import java.util.ArrayList;
import java.util.List;

public class SellerService {

    private List<String> existingNames;

    public SellerService() {
        this.existingNames = new ArrayList<>();
    }

    public List<String> getAllSellerNames() {
        return new ArrayList<>(existingNames); // Return a copy to avoid direct modification of the list
    }

    public void addSellerName(String name) throws SellerNameNotUniqueException {
        if (existingNames.contains(name)) {
            throw new SellerNameNotUniqueException("Seller name must be unique");
        }
        existingNames.add(name);
    }

    // Other methods for CRUD operations on sellers can be added here
}

/////////////////////////////
import org.example.exception.SellerNameNotUniqueException;

import java.util.HashSet;
import java.util.Set;

public class SellerService {

    private final Set<String> sellerNames;

    public SellerService() {
        this.sellerNames = new HashSet<>();
    }

    public void addSellerName(String name) throws SellerNameNotUniqueException {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Seller name cannot be null or empty");
        }
        if (sellerNames.contains(name)) {
            throw new SellerNameNotUniqueException("Seller name '" + name + "' already exists");
        }
        sellerNames.add(name);
    }

    public Set<String> getAllSellerNames() {
        return new HashSet<>(sellerNames);
    }
}
