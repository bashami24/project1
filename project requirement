



HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.



//Navigation bar
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
/*import HomePage from '../pages/Home';<Route path="/" element={<HomePage />} /> */
import SellerPage from '../pages/SellerPage';
import ProductPage from '../pages/ProductPage';
import NotFoundPage from '../pages/PageNotFoundPage';

const NavApp: React.FC = () => {
    return (
        <Router>
            <Routes>
                <Route path="/sellers" element={<SellerPage />} />
                <Route path="/products" element={<ProductPage />} />
                <Route path="*" element={<NotFoundPage />} />
            </Routes>
        </Router>
    );
};

export default NavApp;

//product component
import React, { useEffect, useState } from 'react';
import { Product } from '../models/Product';
import { getAllProducts, addProduct } from '../services/ProductService';

const ProductList: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showMenuId, setShowMenuId] = useState<number | null>(null);
    const [newProductName, setNewProductName] = useState('');

    useEffect(() => {
        getAllProducts().then(setProducts);
    }, []);

    const toggleMenu = (productId: number) => {
        setShowMenuId((prevId) => (prevId === productId ? null : productId));
    };

    const handleAddProduct = async () => {
        if (!newProductName) return;
        await addProduct({ id: 0, name: newProductName, price: 0, sellerId: 0 });
        setNewProductName('');
        getAllProducts().then(setProducts);
    };

    return (
        <div>
            <h2>All Products</h2>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>
                        {product.name}{' '}
                        <button onClick={() => toggleMenu(product.id)}>
                            {showMenuId === product.id ? 'Hide' : 'Show'} Menu
                        </button>
                        {showMenuId === product.id && (
                            <div>
                                <button onClick={() => console.log(`Update product ${product.id}`)}>Update</button>
                                <button onClick={() => console.log(`Delete product ${product.id}`)}>Delete</button>
                            </div>
                        )}
                    </li>
                ))}
            </ul>
            <input
                type="text"
                placeholder="Enter product name"
                value={newProductName}
                onChange={(e) => setNewProductName(e.target.value)}
            />
            <button onClick={handleAddProduct}>Add Product</button>
        </div>
    );
};

export default ProductList;

//seller component

import React, { useEffect, useState } from 'react';
import { Seller } from '../models/Seller';
import { getAllSellers } from '../services/SellerService';

interface SellerListProps {
    seller: Seller;
}
 const SellerList: React.FC<SellerListProps> = ({seller}) => {
    const [sellers, setSellers] = useState<Seller[]>([]);

    useEffect(() => {
        getAllSellers().then(setSellers);
    }, []);

    return (
        <div>
            <h2>All Sellers</h2>
            <ul>
                {sellers.map((seller) => (
                    <li key={seller.id}>{seller.name}</li>
                ))}
            </ul>
        </div>
    );
};
export default SellerList;
//pagenotfound page
import React from 'react';

const NotFoundPage: React.FC = () => {
    return (
        <div>
            <h1>404 - Page Not Found</h1>
            <p>The page you are looking for does not exist.</p>
        </div>
    );
};

export default NotFoundPage;

//product page 
import React from 'react';
import { Product } from '../models/Product';
import { getAllProducts } from '../services/ProductService';

const ProductPage: React.FC = () => {
    const [products, setProducts] = React.useState<Product[]>([]);

    React.useEffect(() => {
        const fetchProducts = async () => {
            const fetchedProducts = await getAllProducts();
            setProducts(fetchedProducts);
        };
        fetchProducts();
    }, []);

    return (
        <div>
            <h1>Products</h1>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>{product.name}</li>
                ))}
            </ul>
        </div>
    );
};

export default ProductPage;

//seller page

import React, { useState, useEffect } from 'react';
import { Seller } from '../models/Seller';
import { getAllSellers, addSeller } from '../services/SellerService';
import SellerList from '../components/SellerList'; // Correct import

const SellerPage: React.FC = () => {
    const [sellers, setSellers] = useState<Seller[]>([]);
    const [newSellerId, setNewSellerId] = useState<number>(0);
    const [newSellerName, setNewSellerName] = useState<string>('');

    useEffect(() => {
        getAllSellers().then(setSellers);
    }, []);

    const handleAddSeller = async () => {
        if (!newSellerName || newSellerId <= 0) return;
        await addSeller({name:newSellerName,id:newSellerId}); // Pass seller object
        setNewSellerId(0);
        setNewSellerName('');
        getAllSellers().then(setSellers);
    };

    return (
        <div>
            <h1>Sellers</h1>
            <ul>
                {sellers.map((seller) => (
                    <li key={seller.id}>
                        <SellerList seller={seller} /> {/* Pass seller object */}
                    </li>
                ))}
            </ul>
            <input
                type="number"
                placeholder="Enter seller ID"
                value={newSellerId}
                onChange={(e) => setNewSellerId(parseInt(e.target.value))}
            />
            <input
                type="text"
                placeholder="Enter seller name"
                value={newSellerName}
                onChange={(e) => setNewSellerName(e.target.value)}
            />
            <button onClick={handleAddSeller}>Add Seller</button>
        </div>
    );
};

export default SellerPage;

product service 
import axios from 'axios';
import { Product } from '../models/Product';
const API_URL = 'http://localhost:9017';

export const getAllProducts = async (): Promise<Product[]> => {
    try {
        const response = await axios.get<Product[]>(`${API_URL}/products`);
        return response.data;
    } catch (error) {
        console.error('Error fetching products:', error);
        throw error; // Rethrow the error to handle it elsewhere if needed
    }
};

export const addProduct = async (product: Product): Promise<void> => {
    try {
        await axios.post(`${API_URL}/products`, product);
    } catch (error) {
        console.error('Error adding product:', error);
        throw error; // Rethrow the error to handle it elsewhere if needed
    }
};

//seller service 

import axios from 'axios';
import { Seller } from '../models/Seller';

const API_URL = 'http://localhost:9017';

export const getAllSellers = async (): Promise<Seller[]> => {
  try{  const response = await axios.get<Seller[]>(`${API_URL}/sellers`);
    return response.data;

} catch (error) { console.error('Error fetching Sellers', error);
return[];}
};

export const addSeller = async ({name, id}:{name: string,id: number}): Promise<void> => {
    try {
        await axios.post(`${API_URL}/sellers`, {name,id});
    } catch (error) {
        console.error('Error adding seller:', error);
        throw error; // Rethrow the error to handle it elsewhere if needed
    }
};
 //app.tsx
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import SellerPage from './pages/SellerPage';
import ProductPage from './pages/ProductPage';
import NotFoundPage from './pages/PageNotFoundPage';

const App: React.FC = () => {
    return (
        <Router>
            <Routes>
            <Route path="/seller" element={<SellerPage />} />
            <Route path="/product" element={<ProductPage />} />
            <Route path="*" element={<NotFoundPage/>}/>
            </Routes>
        </Router>
    );
};

export default App;


const apiBaseURL = "http://localhost:9017/"
export function getAllSellerAPI(){
    return fetch(apiBaseURL+"seller",{
            method:"GET",
            mode:"cors"
        });
}
export function postSomeSeller(){
    return fetch(apiBaseURL+"seller", {
        method:"POST",
        mode:"cors",
        headers:{"Content-Type":"application/json"},
        body:JSON.stringify({name:"", id:1})
    })
}


// services/SellerService.ts
const apiBaseURL = "http://localhost:9017/";

export function getAllSellersAPI() {
    return fetch(apiBaseURL + "sellers", {
        method: "GET",
        mode: "cors"
    });
}

export function addSellerAPI(name: string, id: number) {
    return fetch(apiBaseURL + "sellers", {
        method: "POST",
        mode: "cors",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, id })
    });
}



// services/ProductService.ts
const apiBaseURL = "http://localhost:9017/";

export function getAllProductsAPI() {
    return fetch(apiBaseURL + "products", {
        method: "GET",
        mode: "cors"
    });
}

export function addProductAPI(name: string, price: number, sellerId: number) {
    return fetch(apiBaseURL + "products", {
        method: "POST",
        mode: "cors",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, price, sellerId })
    });
}



// components/SellerList.tsx
import React from 'react';
import { Seller } from '../models/Seller';

interface SellerListProps {
    sellers: Seller[];
}

const SellerList: React.FC<SellerListProps> = ({ sellers }) => {
    return (
        <div>
            <h2>All Sellers</h2>
            <ul>
                {sellers.map((seller) => (
                    <li key={seller.id}>{seller.name}</li>
                ))}
            </ul>
        </div>
    );
};

export default SellerList;



// components/ProductList.tsx
import React from 'react';
import { Product } from '../models/Product';

interface ProductListProps {
    products: Product[];
}

const ProductList: React.FC<ProductListProps> = ({ products }) => {
    return (
        <div>
            <h2>All Products</h2>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>{product.name}</li>
                ))}
            </ul>
        </div>
    );
};

export default ProductList;




// components/NavigationBar.tsx
import React from 'react';
import { Link } from 'react-router-dom';

const NavigationBar: React.FC = () => {
    return (
        <nav>
            <ul>
                <li><Link to="/">Home</Link></li>
                <li><Link to="/sellers">Sellers</Link></li>
                <li><Link to="/products">Products</Link></li>
            </ul>
        </nav>
    );
};

export default NavigationBar;



// pages/HomePage.tsx
import React from 'react';

const HomePage: React.FC = () => {
    return (
        <div>
            <h1>Welcome to the Home Page</h1>
            <p>This is the landing page of your application.</p>
        </div>
    );
};

export default HomePage;



// pages/SellerPage.tsx
import React, { useEffect, useState } from 'react';
import SellerList from '../components/SellerList';
import { getAllSellersAPI, addSellerAPI } from '../services/SellerService';
import { Seller } from '../models/Seller';

const SellerPage: React.FC = () => {
    const [sellers, setSellers] = useState<Seller[]>([]);

    useEffect(() => {
        getAllSellersAPI().then(response => response.json())
            .then(data => setSellers(data));
    }, []);

    const handleAddSeller = () => {
        addSellerAPI("New Seller", 1).then(() => {
            getAllSellersAPI().then(response => response.json())
                .then(data => setSellers(data));
        });
    };

    return (
        <div>
            <h1>Sellers</h1>
            <SellerList sellers={sellers} />
            <button onClick={handleAddSeller}>Add Seller</button>
        </div>
    );
};

export default SellerPage;


// pages/ProductPage.tsx
import React, { useEffect, useState } from 'react';
import ProductList from '../components/ProductList';
import { getAllProductsAPI, addProductAPI } from '../services/ProductService';
import { Product } from '../models/Product';

const ProductPage: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);

    useEffect(() => {
        getAllProductsAPI().then(response => response.json())
            .then(data => setProducts(data));
    }, []);

    const handleAddProduct = () => {
        addProductAPI("New Product", 0, 0).then(() => {
            getAllProductsAPI().then(response => response.json())
                .then(data => setProducts(data));
        });
    };

    return (
        <div>
            <h1>Products</h1>
            <ProductList products={products} />
            <button onClick={handleAddProduct}>Add Product</button>
        </div>
    );
};

export default ProductPage;



// pages/PageNotFoundPage.tsx
import React from 'react';

const PageNotFoundPage: React.FC = () => {
    return (
        <div>
            <h1>404 - Page Not Found</h1>
            <p>The page you are looking for does not exist.</p>
        </div>
    );
};

export default PageNotFoundPage;

// App.tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import NavigationBar from './components/NavigationBar';
import HomePage from './pages/HomePage';
import SellerPage from './pages/SellerPage';
import ProductPage from './pages/ProductPage';
import PageNotFoundPage from './pages/PageNotFoundPage';

const App: React.FC = () => {
    return (
        <Router>
            <div>
                <NavigationBar />
                <Routes>
                    <Route path="/" element={<HomePage />} />
                    <Route path="/sellers" element={<SellerPage />} />
                    <Route path="/products" element={<ProductPage />} />
                    <Route path="*" element={<PageNotFoundPage />} />
                </Routes>
            </div>
        </Router>
    );
};

export default App;


Uncaught (in promise) Error: A listener indicated an asynchronous response by returning true, but the message channel closed befo
re a response was received


// pages/SellerPage.tsx

import React, { useEffect, useState } from 'react';
import SellerList from '../components/SellerList';
import { getAllSellersAPI, addSellerAPI } from '../services/SellerService';
import { Seller } from '../models/Seller';

const SellerPage: React.FC = () => {
    const [sellers, setSellers] = useState<Seller[]>([]);
    const [showAddSellerForm, setShowAddSellerForm] = useState(false);
    const [newSellerName, setNewSellerName] = useState('');

    useEffect(() => {
        getAllSellersAPI().then(data => setSellers(data));
    }, []);

    const handleAddSeller = () => {
        addSellerAPI(newSellerName).then(() => {
            getAllSellersAPI().then(data => setSellers(data));
            setShowAddSellerForm(false);
            setNewSellerName('');
        });
    };

    return (
        <div>
            <h1>Sellers</h1>
            <SellerList sellers={sellers} />
            {showAddSellerForm ? (
                <div>
                    <input
                        type="text"
                        placeholder="Enter seller name"
                        value={newSellerName}
                        onChange={(e) => setNewSellerName(e.target.value)}
                    />
                    <button onClick={handleAddSeller}>Add Seller</button>
                </div>
            ) : (
                <button onClick={() => setShowAddSellerForm(true)}>Add New Seller</button>
            )}
        </div>
    );
};

export default SellerPage;


// pages/ProductPage.tsx

import React, { useEffect, useState } from 'react';
import ProductList from '../components/ProductList';
import { getAllProductsAPI, deleteProductAPI } from '../services/ProductService';
import { Product } from '../models/Product';

const ProductPage: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showProductMenu, setShowProductMenu] = useState<number | null>(null);

    useEffect(() => {
        getAllProductsAPI().then(data => setProducts(data));
    }, []);

    const handleDeleteProduct = (productId: number) => {
        deleteProductAPI(productId).then(() => {
            getAllProductsAPI().then(data => setProducts(data));
            setShowProductMenu(null);
        });
    };

    return (
        <div>
            <h1>Products</h1>
            <ProductList
                products={products}
                toggleProductMenu={(productId) =>
                    setShowProductMenu((prevId) => (prevId === productId ? null : productId))
                }
                showProductMenu={showProductMenu}
                handleDeleteProduct={handleDeleteProduct}
            />
        </div>
    );
};

export default ProductPage;



// components/ProductList.tsx

import React from 'react';
import { Product } from '../models/Product';

interface ProductListProps {
    products: Product[];
    toggleProductMenu: (productId: number) => void;
    showProductMenu: number | null;
    handleDeleteProduct: (productId: number) => void;
}

const ProductList: React.FC<ProductListProps> = ({
    products,
    toggleProductMenu,
    showProductMenu,
    handleDeleteProduct,
}) => {
    return (
        <div>
            <h2>All Products</h2>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>
                        {product.name}{' '}
                        <button onClick={() => toggleProductMenu(product.id)}>
                            {showProductMenu === product.id ? 'Hide' : 'Show'} Menu
                        </button>
                        {showProductMenu === product.id && (
                            <div>
                                <button onClick={() => console.log(`Update product ${product.id}`)}>Update</button>
                                <button onClick={() => handleDeleteProduct(product.id)}>Delete</button>
                            </div>
                        )}
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default ProductList;



// components/NavigationBar.tsx

import React from 'react';
import { Link } from 'react-router-dom';

const NavigationBar: React.FC = () => {
    return (
        <nav>
            <ul>
                <li><Link to="/">Home</Link></li>
                <li><Link to="/sellers">Sellers</Link></li>
                <li><Link to="/products">Products</Link></li>
            </ul>
        </nav>
    );
};

export default NavigationBar;


// App.tsx

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import NavigationBar from './components/NavigationBar';
import HomePage from './pages/HomePage';
import SellerPage from './pages/SellerPage';
import ProductPage from './pages/ProductPage';
import PageNotFoundPage from './pages/PageNotFoundPage';

const App: React.FC = () => {
    return (
        <Router>
            <div>
                <NavigationBar />
                <Routes>
                    <Route path="/" element={<HomePage />} />
                    <Route path="/sellers" element={<SellerPage />} />
                    <Route path="/products" element={<ProductPage />} />
                    <Route path="*" element={<PageNotFoundPage />} />
                </Routes>
            </div>
        </Router>
    );
};

export default App;



// pages/SellerPage.tsx

import React, { useEffect, useState } from 'react';
import SellerList from '../components/SellerList';
import { getAllSellersAPI, addSellerAPI } from '../services/SellerService';
import { Seller } from '../models/Seller';

const SellerPage: React.FC = () => {
    const [sellers, setSellers] = useState<Seller[]>([]);
    const [showAddSellerForm, setShowAddSellerForm] = useState(false);
    const [newSellerName, setNewSellerName] = useState('');

    useEffect(() => {
        getAllSellersAPI().then(response => response.json()).then(data => setSellers(data));
    }, []);

    const handleAddSeller = () => {
        addSellerAPI(newSellerName).then(() => {
            getAllSellersAPI().then(response => response.json()).then(data => {
                setSellers(data);
                setShowAddSellerForm(false);
                setNewSellerName('');
            });
        });
    };

    return (
        <div>
            <h1>Sellers</h1>
            <SellerList sellers={sellers} />
            {showAddSellerForm ? (
                <div>
                    <input
                        type="text"
                        placeholder="Enter seller name"
                        value={newSellerName}
                        onChange={(e) => setNewSellerName(e.target.value)}
                    />
                    <button onClick={handleAddSeller}>Add Seller</button>
                </div>
            ) : (
                <button onClick={() => setShowAddSellerForm(true)}>Add New Seller</button>
            )}
        </div>
    );
};

export default SellerPage;




