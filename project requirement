import React, { useEffect, useState } from 'react';
import { Product } from '../models/Product';
import { getAllProductsAPI, addProductAPI, deleteProductAPI, updateProductAPI } from '../services/ProductService';

const ProductPage: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showMenuId, setShowMenuId] = useState<number | null>(null);
    const [newProduct, setNewProduct] = useState<{ name: string; price: number; seller: number }>({
        name: '',
        price: 0,
        seller: 0
    });

    useEffect(() => {
        getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
    }, []);

    const toggleMenu = (productId: number) => {
        setShowMenuId((prevId) => (prevId === productId ? null : productId));
    };

    const handleDeleteProduct = (productId: number) => {
        deleteProductAPI(productId).then(() => {
            setProducts(products.filter(product => product.id !== productId));
            setShowMenuId(null);
        });
    };

    const handleUpdateProduct = (productId: number, newName: string, newPrice: number, newSeller: number) => {
        updateProductAPI(productId, newName, newPrice, newSeller).then(() => {
            const updatedProducts = products.map(product => {
                if (product.id === productId) {
                    return { ...product, name: newName, price: newPrice, seller: newSeller };
                }
                return product;
            });
            setProducts(updatedProducts);
            setShowMenuId(null);
        });
    };

    const handleAddProduct = () => {
        addProductAPI(newProduct.name, newProduct.price, newProduct.seller).then(() => {
            setNewProduct({ name: '', price: 0, seller: 0 });
            getAllProductsAPI().then(response => response.json()).then(data => setProducts(data));
        });
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setNewProduct(prevState => ({ ...prevState, [name]: name === 'price' || name === 'seller' ? parseInt(value) : value }));
    };

    return (
        <div>
            <h1>Products</h1>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>
                        {product.name} - {product.price} - {product.seller}
                        <button onClick={() => toggleMenu(product.id)}>Toggle Menu</button>
                        {showMenuId === product.id && (
                            <div>
                                <input
                                    type="text"
                                    value={product.name}
                                    onChange={(e) => handleUpdateProduct(product.id, e.target.value, product.price, product.seller)}
                                />
                                <input
                                    type="number"
                                    value={product.price}
                                    onChange={(e) => handleUpdateProduct(product.id, product.name, parseInt(e.target.value), product.seller)}
                                />
                                <input
                                    type="number"
                                    value={product.seller}
                                    onChange={(e) => handleUpdateProduct(product.id, product.name, product.price, parseInt(e.target.value))}
                                />
                                <button onClick={() => handleDeleteProduct(product.id)}>Delete</button>
                            </div>
                        )}
                    </li>
                ))}
            </ul>
            <h2>Add Product</h2>
            <form onSubmit={(e) => { e.preventDefault(); handleAddProduct(); }}>
                <label>
                    Name:
                    <input type="text" name="name" value={newProduct.name} onChange={handleChange} />
                </label>
                <label>
                    Price:
                    <input type="number" name="price" value={newProduct.price} onChange={handleChange} />
                </label>
                <label>
                    Seller ID:
                    <input type="number" name="seller" value={newProduct.seller} onChange={handleChange} />
                </label>
                <button type="submit">Add Product</button>
            </form>
        </div>
    );
};

export default ProductPage;


react-dom.development.js:86 Warning: Received NaN for the `value` attribute. If this is expected, cast the value to a string.
    at input
    at label
    at form
    at div
    at ProductPage (http://localhost:3000/static/js/bundle.js:604:82)
    at RenderedRoute (http://localhost:3000/static/js/bundle.js:39775:5)
    at Routes (http://localhost:3000/static/js/bundle.js:40466:5)
    at div
    at Router (http://localhost:3000/static/js/bundle.js:40400:15)
    at BrowserRouter (http://localhost:3000/static/js/bundle.js:38353:5)
    at App
