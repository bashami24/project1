with feature_cumulative_payments as (
select distinct
A.CLAIM_PUBLICID_NK,
A.EXPOSURE_PUBLICID_NK,
A.CLAIM_SYMBOL_CODE,
A.ACCOUNTING_TIMESTAMP,
A.CLAIM_NUMBER,

sum(case when COST_TYPE_NAME in ( 'Loss', 'Litigation - Loss') and TRANSACTION_TYPE_NAME = 'Payment' then TRANSACTION_AMOUNT
     else 0 END)  over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE,A.ACCOUNTING_TIMESTAMP) as LOSS_PAYMENT_AMOUNT,

sum (case when COST_TYPE_NAME in ( 'Loss', 'Litigation - Loss') and TRANSACTION_TYPE_NAME = 'Payment' then TRANSACTION_AMOUNT
          else 0 END) over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE
                   order by A.ACCOUNTING_TIMESTAMP ASC)
as LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION,

sum(case when COST_TYPE_NAME in ( 'Expense','Litigation - Expense') and TRANSACTION_TYPE_NAME = 'Payment'
     and LINE_CATEGORY_CODE not in ('RA','RB','RC','RD','RF','RI','RM','RP','RR','RS','RT','RW','RX','RZ')
    then TRANSACTION_AMOUNT
    else 0 END)  over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE,A.ACCOUNTING_TIMESTAMP) as EXPENSE_PAYMENT_AMOUNT,

sum (case when COST_TYPE_NAME in ( 'Expense','Litigation - Expense') and TRANSACTION_TYPE_NAME = 'Payment'
     and LINE_CATEGORY_CODE not in ('RA','RB','RC','RD','RF','RI','RM','RP','RR','RS','RT','RW','RX','RZ')
    then TRANSACTION_AMOUNT
    else 0 END)  over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE
                   order by A.ACCOUNTING_TIMESTAMP ASC)
as EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION,


sum (case
    when COST_TYPE_NAME  in ( 'Loss', 'Litigation - Loss') and TRANSACTION_TYPE_NAME = 'Reserve' then  TRANSACTION_AMOUNT
    when COST_TYPE_NAME in ( 'Loss', 'Litigation - Loss') and TRANSACTION_TYPE_NAME = 'Payment' AND ERODES_RESERVES_INDICATOR = 'Yes' then -1*TRANSACTION_AMOUNT
    else 0 END) over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE order by A.ACCOUNTING_TIMESTAMP ASC)
as CASE_RESERVE_LOSS_AMOUNT,


sum (case
    when  COST_TYPE_NAME in ( 'Expense','Litigation - Expense') and TRANSACTION_TYPE_NAME = 'Reserve' then  TRANSACTION_AMOUNT
    when COST_TYPE_NAME in ( 'Expense','Litigation - Expense') and TRANSACTION_TYPE_NAME = 'Payment' AND ERODES_RESERVES_INDICATOR = 'Yes' then -1*TRANSACTION_AMOUNT
    else 0 END) over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE order by A.ACCOUNTING_TIMESTAMP ASC)
as CASE_RESERVE_EXPENSE_AMOUNT,


sum(case when  TRANSACTION_TYPE_DETAIL = 'Salvage Recovery' and TRANSACTION_TYPE_NAME = 'Recovery' then  TRANSACTION_AMOUNT
    else 0 END )  over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE,A.ACCOUNTING_TIMESTAMP) as SALVAGE_RECOVERY_AMOUNT,

sum (case when  TRANSACTION_TYPE_DETAIL = 'Salvage Recovery' and TRANSACTION_TYPE_NAME = 'Recovery' then  TRANSACTION_AMOUNT
    else 0 END) over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE  order by A.ACCOUNTING_TIMESTAMP ASC)
as SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION,


sum(case when TRANSACTION_TYPE_DETAIL in ( 'Subrogation Recovery', 'Recovery') and TRANSACTION_TYPE_NAME = 'Recovery' then  TRANSACTION_AMOUNT
    else 0 END)  over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE,A.ACCOUNTING_TIMESTAMP)as SUBROGATION_RECOVERY,

sum (case when  TRANSACTION_TYPE_DETAIL in ( 'Subrogation Recovery', 'Recovery') and TRANSACTION_TYPE_NAME = 'Recovery' then  TRANSACTION_AMOUNT
    else 0 END) over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE order by A.ACCOUNTING_TIMESTAMP ASC)
as SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION,


sum(case when (TRANSACTION_TYPE_DETAIL = 'Subrogation Expense/Reimbursement' and TRANSACTION_TYPE_NAME = 'Recovery') then  -1*TRANSACTION_AMOUNT
         when (TRANSACTION_TYPE_NAME = 'Payment' and COST_TYPE_NAME in ( 'Expense', 'Litigation - Expense')
        and LINE_CATEGORY_CODE in ('RA','RB','RC','RD','RF','RI','RM','RP','RR','RS','RT','RW','RX','RZ') ) then  TRANSACTION_AMOUNT
  else 0 END)  over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE,A.ACCOUNTING_TIMESTAMP) as SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT,


sum (case  when  (TRANSACTION_TYPE_DETAIL = 'Subrogation Expense/Reimbursement' and TRANSACTION_TYPE_NAME = 'Recovery') then  -1*TRANSACTION_AMOUNT
           when (TRANSACTION_TYPE_NAME = 'Payment' and COST_TYPE_NAME in ( 'Expense', 'Litigation - Expense')
        and LINE_CATEGORY_CODE in ('RA','RB','RC','RD','RF','RI','RM','RP','RR','RS','RT','RW','RX','RZ') ) then  TRANSACTION_AMOUNT
    else 0 END) over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE order by A.ACCOUNTING_TIMESTAMP ASC)
as SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION,


sum(case when COST_TYPE_NAME in ( 'Expense','Litigation - Expense') and TRANSACTION_TYPE_NAME = 'Payment'
     and LINE_CATEGORY_CODE in ('AA','AC','AF','AH','AM','AP','AZ')
    then TRANSACTION_AMOUNT
    else 0 END)  over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE,A.ACCOUNTING_TIMESTAMP) as ADJUSTER_EXPENSE_PAYMENT_AMOUNT,

sum (case when COST_TYPE_NAME in ( 'Expense','Litigation - Expense') and TRANSACTION_TYPE_NAME = 'Payment'
     and LINE_CATEGORY_CODE in ('AA','AC','AF','AH','AM','AP','AZ')
    then TRANSACTION_AMOUNT
    else 0 END)  over (partition by A.EXPOSURE_PUBLICID_NK, A.CLAIM_SYMBOL_CODE
                   order by A.ACCOUNTING_TIMESTAMP ASC)
as ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION,


(LOSS_PAYMENT_AMOUNT + SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT
 - SALVAGE_RECOVERY_AMOUNT - SUBROGATION_RECOVERY) as NET_LOSS_PAYMENT_AMOUNT,


(LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION + SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION
 - SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION - SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION) as NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION

from pd_presentation.product_v2.claim_financial_transaction as A
WHERE A.ACCOUNTING_TIMESTAMP <= '2022-10-31 23:59:59'
and claim_number = '0803908060000001' and exposure_publicid_NK = 'cc:908470261' and claim_symbol_code = 'DPR'
),
  
-- SELECT * FROM feature_cumulative_payments;


joining_feature_timeline as
(select

 B.CLAIM_NUMBER
 ,B.CLAIM_PUBLICID_NK
 ,B.EXPOSURE_PUBLICID_NK
 ,B.CLAIM_SYMBOL_CODE
 ,B.CREATE_TIMESTAMP
 ,B.RECORD_BEGIN_TIMESTAMP
 ,C.ACCOUNTING_TIMESTAMP
 ,B.RECORD_END_TIMESTAMP
 ,B.CLOSE_TIMESTAMP
 ,CASE WHEN B.STATUS_NAME = 'Closed' THEN B.PRIOR_REOPEN_TIMESTAMP ELSE B.REOPEN_TIMESTAMP END AS REOPEN_TIMESTAMP
 ,B.STATUS_NAME
 ,B.RESERVE_TYPE_NAME
 ,B.PRIOR_RESERVE_TYPE_NAME
 ,B.NEW_REPORTED_COUNT
 ,B.NEW_REOPENED_REPORTED_COUNT
 ,C.LOSS_PAYMENT_AMOUNT
 ,C.LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION
 ,C.EXPENSE_PAYMENT_AMOUNT
 ,C.EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION
 ,C.CASE_RESERVE_LOSS_AMOUNT
 ,C.CASE_RESERVE_EXPENSE_AMOUNT
 ,C.SALVAGE_RECOVERY_AMOUNT
 ,C.SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION
 ,C.SUBROGATION_RECOVERY
 ,C.SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION
 ,C.SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT
 ,C.SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION
 ,C.ADJUSTER_EXPENSE_PAYMENT_AMOUNT
 ,C.ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION
 ,C.NET_LOSS_PAYMENT_AMOUNT
 ,C.NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION
 ,SUM(C.LOSS_PAYMENT_AMOUNT)   OVER (PARTITION BY  B.CLAIM_NUMBER,B.EXPOSURE_PUBLICID_NK, B.CLAIM_SYMBOL_CODE, CASE WHEN STATUS_NAME = 'Closed' THEN B.PRIOR_REOPEN_TIMESTAMP ELSE B.REOPEN_TIMESTAMP END ORDER BY   B.RECORD_BEGIN_TIMESTAMP) AS LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN
 ,SUM(C.EXPENSE_PAYMENT_AMOUNT)   OVER (PARTITION BY  B.CLAIM_NUMBER,B.EXPOSURE_PUBLICID_NK, B.CLAIM_SYMBOL_CODE, CASE WHEN STATUS_NAME = 'Closed' THEN B.PRIOR_REOPEN_TIMESTAMP ELSE B.REOPEN_TIMESTAMP END ORDER BY  B.RECORD_BEGIN_TIMESTAMP) AS EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN
 ,SUM(C.SALVAGE_RECOVERY_AMOUNT)   OVER (PARTITION BY  B.CLAIM_NUMBER,B.EXPOSURE_PUBLICID_NK, B.CLAIM_SYMBOL_CODE, CASE WHEN STATUS_NAME = 'Closed' THEN B.PRIOR_REOPEN_TIMESTAMP ELSE B.REOPEN_TIMESTAMP END ORDER BY  B.RECORD_BEGIN_TIMESTAMP) AS SALVAGE_RECOVERY_AMOUNT_SINCE_LAST_REOPEN
 ,SUM(C.SUBROGATION_RECOVERY)   OVER (PARTITION BY  B.CLAIM_NUMBER,B.EXPOSURE_PUBLICID_NK, B.CLAIM_SYMBOL_CODE, CASE WHEN STATUS_NAME = 'Closed' THEN B.PRIOR_REOPEN_TIMESTAMP ELSE B.REOPEN_TIMESTAMP END ORDER BY  B.RECORD_BEGIN_TIMESTAMP) AS SUBROGATION_RECOVERY_AMOUNT_SINCE_LAST_REOPEN
 ,SUM(C.SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT)   OVER (PARTITION BY  B.CLAIM_NUMBER,B.EXPOSURE_PUBLICID_NK, B.CLAIM_SYMBOL_CODE, CASE WHEN STATUS_NAME = 'Closed' THEN B.PRIOR_REOPEN_TIMESTAMP ELSE B.REOPEN_TIMESTAMP END ORDER BY  B.RECORD_BEGIN_TIMESTAMP) AS SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_LAST_REOPEN
 ,SUM(C.ADJUSTER_EXPENSE_PAYMENT_AMOUNT)   OVER (PARTITION BY  B.CLAIM_NUMBER,B.EXPOSURE_PUBLICID_NK, B.CLAIM_SYMBOL_CODE, CASE WHEN STATUS_NAME = 'Closed' THEN B.PRIOR_REOPEN_TIMESTAMP ELSE B.REOPEN_TIMESTAMP END ORDER BY  B.RECORD_BEGIN_TIMESTAMP) AS ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN
 ,SUM(C.NET_LOSS_PAYMENT_AMOUNT)   OVER (PARTITION BY  B.CLAIM_NUMBER,B.EXPOSURE_PUBLICID_NK, B.CLAIM_SYMBOL_CODE, CASE WHEN STATUS_NAME = 'Closed' THEN B.PRIOR_REOPEN_TIMESTAMP ELSE B.REOPEN_TIMESTAMP END ORDER BY  B.RECORD_BEGIN_TIMESTAMP) AS NET_LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN
,FEATURE_RESERVE_STATUS_CODE
,PENDING_OR_CLOSED
,NEW_CLOSED_COUNT
,CLOSED_COUNT_INCEPTION
,REOPEN_COUNT_INCEPTION
,RANK_ORDER
,B.S160_COVERAGE_CODE
from (Select *
      ,SUM(CASE WHEN CLOSE_TIMESTAMP IS NOT NULL THEN 1 ELSE 0 END) over (
            partition by CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE
            order by  RECORD_BEGIN_TIMESTAMP) AS CLOSED_COUNT_INCEPTION
      ,SUM(CASE WHEN REOPEN_TIMESTAMP IS NOT NULL THEN 1 ELSE 0 END) over (
            partition by CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE
            order by  RECORD_BEGIN_TIMESTAMP) AS REOPEN_COUNT_INCEPTION
      ,LAG(REOPEN_TIMESTAMP) OVER(PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY RECORD_BEGIN_TIMESTAMP) AS PRIOR_REOPEN_TIMESTAMP
      ,CASE WHEN STATUS_NAME = 'Open' and RESERVE_TYPE_NAME = 'Stat' THEN 'NEWAVG'
            WHEN STATUS_NAME = 'Open' and RESERVE_TYPE_NAME = 'Case' THEN 'NEWCASE'
            WHEN STATUS_NAME = 'Closed' and RESERVE_TYPE_NAME = 'Stat' and REOPEN_COUNT_INCEPTION = 0 THEN 'NEWAVG'
            WHEN STATUS_NAME = 'Closed' and RESERVE_TYPE_NAME = 'Case' and REOPEN_COUNT_INCEPTION = 0 THEN 'NEWCASE'
            WHEN STATUS_NAME = 'Reopened' and RESERVE_TYPE_NAME = 'Stat'  THEN 'REAVG'
            WHEN STATUS_NAME = 'Reopened' and RESERVE_TYPE_NAME = 'Case'  THEN 'RECASE'
            WHEN STATUS_NAME = 'Closed' and RESERVE_TYPE_NAME = 'Stat' and REOPEN_COUNT_INCEPTION > 0 THEN 'REAVG'
            WHEN STATUS_NAME = 'Closed' and RESERVE_TYPE_NAME = 'Case' and REOPEN_COUNT_INCEPTION > 0 THEN 'RECASE'
       ELSE NULL END AS FEATURE_RESERVE_STATUS_CODE
      ,CASE WHEN STATUS_NAME = 'Closed' THEN 'Closed' ELSE 'Pending' END AS PENDING_OR_CLOSED
      ,CASE WHEN COUNT_IF(STATUS_NAME= 'Closed') over (
            partition by CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, STATUS_NAME
            order by  RECORD_BEGIN_TIMESTAMP )   = 1 THEN 1 ELSE 0 END AS NEW_CLOSED_COUNT
      ,RANK() OVER(PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY RECORD_BEGIN_TIMESTAMP DESC) AS RANK_ORDER
       from pd_presentation.product_v2.claim_feature_timeline
       where  RECORD_BEGIN_TIMESTAMP <=  '2022-10-31 23:59:59'
       and claim_number = '0803908060000001' and exposure_publicid_NK = 'cc:908470261' and claim_symbol_code = 'DPR'
 ) B
left join feature_cumulative_payments C
ON B.EXPOSURE_PUBLICID_NK = C.EXPOSURE_PUBLICID_NK AND B.CLAIM_SYMBOL_CODE = C.CLAIM_SYMBOL_CODE --AND B.CLAIM_NUMBER = C.CLAIM_NUMBER
AND date_trunc('SECOND', C.ACCOUNTING_TIMESTAMP) >= date_trunc('SECOND', B.RECORD_BEGIN_TIMESTAMP) and
  date_trunc('SECOND', C.ACCOUNTING_TIMESTAMP) < date_trunc('SECOND', B.RECORD_END_TIMESTAMP)

  ),
  
  --select * from joining_feature_timeline;
 /* reopen_snapshot as
  (  select *, CASE WHEN  REOPEN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN MAX(NEW_REOPENED_REPORTED_COUNT) OVER (PARTITION BY  CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, 
    CLAIM_SYMBOL_CODE,YEAR(REOPEN_TIMESTAMP), MONTH(REOPEN_TIMESTAMP),REOPEN_TIMESTAMP) ELSE 0 END AS NEW_REOPENED_REPORTED_COUNT_1
  FROM (select  * from joining_feature_timeline) where
 ((record_begin_timestamp  <=  '2022-10-31 23:59:59')
     OR (ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'))

     ),*/

feature_snapshot_stg1 as
(
SELECT *

,CASE WHEN  CREATE_TIMESTAMP between   '2022-10-01'and  '2022-10-31 23:59:59'and STATUS_NAME != 
  'Reopened' THEN MAX(NEW_REPORTED_COUNT) OVER (PARTITION BY  CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, YEAR(CREATE_TIMESTAMP), MONTH(CREATE_TIMESTAMP))
  ELSE 0 END AS NEW_REPORTED_COUNT_1
,CASE
    WHEN REOPEN_TIMESTAMP BETWEEN '2022-10-01' AND '2022-10-31 23:59:59' THEN
        (CASE
            WHEN ROW_NUMBER() OVER (PARTITION BY CLAIM_NUMBER, EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY NEW_REOPENED_REPORTED_COUNT DESC) = 1 THEN
                MAX(NEW_REOPENED_REPORTED_COUNT) OVER (PARTITION BY CLAIM_NUMBER, EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, YEAR(REOPEN_TIMESTAMP), MONTH(REOPEN_TIMESTAMP), REOPEN_TIMESTAMP)
            ELSE 0
        END)
    ELSE 0
END AS NEW_REOPENED_REPORTED_COUNT_1
QUALIFY ROW_NUMBER() OVER (PARTITION BY CLAIM_NUMBER, EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY REOPEN_TIMESTAMP DESC) = 1
,CASE WHEN  CLOSE_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'and STATUS_NAME != 'Reopened' THEN MAX(NEW_CLOSED_COUNT) OVER (PARTITION BY  CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, YEAR(CLOSE_TIMESTAMP), MONTH(CLOSE_TIMESTAMP)) ELSE 0 END AS NEW_CLOSED_COUNT_1
,CASE WHEN (ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59') THEN SUM(LOSS_PAYMENT_AMOUNT) OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, YEAR(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END), MONTH(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END) ORDER BY  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP)ELSE 0 END AS LOSS_PAYMENT_AMOUNT_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'
THEN LOSS_PAYMENT_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, REOPEN_TIMESTAMP ORDER BY ACCOUNTING_TIMESTAMP) AS LOSS_PAYMENT_AMOUNT_SINCE_REOPEN_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN LOSS_PAYMENT_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP) AS LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION_CM
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION_1
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ,REOPEN_TIMESTAMP order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN_1


, CASE WHEN (ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59') THEN
  SUM(EXPENSE_PAYMENT_AMOUNT) OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, YEAR(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END), MONTH(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END) ORDER BY  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP)
  ELSE 0 END AS EXPENSE_PAYMENT_AMOUNT_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN EXPENSE_PAYMENT_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, REOPEN_TIMESTAMP ORDER BY ACCOUNTING_TIMESTAMP) AS EXPENSE_PAYMENT_AMOUNT_SINCE_REOPEN_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN EXPENSE_PAYMENT_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP) AS EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION_CM
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION_1
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ,REOPEN_TIMESTAMP order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN_1


,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(CASE_RESERVE_LOSS_AMOUNT)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS CASE_RESERVE_LOSS_AMOUNT_1
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(CASE_RESERVE_EXPENSE_AMOUNT)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS CASE_RESERVE_EXPENSE_AMOUNT_1

, CASE WHEN (ACCOUNTING_TIMESTAMP between '2022-10-01'and  '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59') THEN
  SUM(SALVAGE_RECOVERY_AMOUNT) OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, YEAR(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END), MONTH(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END) ORDER BY  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP)
  ELSE 0 END AS SALVAGE_RECOVERY_AMOUNT_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN SALVAGE_RECOVERY_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, REOPEN_TIMESTAMP ORDER BY ACCOUNTING_TIMESTAMP) AS SALVAGE_RECOVERY_AMOUNT_SINCE_REOPEN_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN SALVAGE_RECOVERY_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP) AS SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION_CM
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION_1
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(SALVAGE_RECOVERY_AMOUNT_SINCE_LAST_REOPEN)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE,REOPEN_TIMESTAMP order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS SALVAGE_RECOVERY_AMOUNT_SINCE_LAST_REOPEN_1


, CASE WHEN (ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59') THEN
  SUM(SUBROGATION_RECOVERY) OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, YEAR(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END), MONTH(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END) ORDER BY  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP)
  ELSE 0 END AS SUBROGATION_RECOVERY_AMOUNT_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN SUBROGATION_RECOVERY ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, REOPEN_TIMESTAMP ORDER BY ACCOUNTING_TIMESTAMP) AS SUBROGATION_RECOVERY_AMOUNT_SINCE_REOPEN_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN SUBROGATION_RECOVERY ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP) AS SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION_CM
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION_1
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(SUBROGATION_RECOVERY_AMOUNT_SINCE_LAST_REOPEN)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ,REOPEN_TIMESTAMP order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS SUBROGATION_RECOVERY_AMOUNT_SINCE_LAST_REOPEN_1


, CASE WHEN (ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59') THEN
  SUM(SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT) OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, YEAR(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END), MONTH(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END) ORDER BY  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP)
  ELSE 0 END AS SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, REOPEN_TIMESTAMP ORDER BY ACCOUNTING_TIMESTAMP) AS SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_REOPEN_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP) AS SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION_CM
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION_1
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_LAST_REOPEN)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE,REOPEN_TIMESTAMP order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_LAST_REOPEN_1

, CASE WHEN (ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59') THEN
  SUM(ADJUSTER_EXPENSE_PAYMENT_AMOUNT) OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE,
  YEAR(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END), MONTH(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END) ORDER BY  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP)
  ELSE 0 END AS ADJUSTER_EXPENSE_PAYMENT_AMOUNT_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'
 THEN ADJUSTER_EXPENSE_PAYMENT_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, REOPEN_TIMESTAMP ORDER BY ACCOUNTING_TIMESTAMP) AS ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_REOPEN_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN ADJUSTER_EXPENSE_PAYMENT_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP) AS ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION_CM
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION_1
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE,REOPEN_TIMESTAMP order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN_1

, CASE WHEN (ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59') THEN
  SUM(NET_LOSS_PAYMENT_AMOUNT) OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, YEAR(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END), MONTH(CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN RECORD_BEGIN_TIMESTAMP ELSE ACCOUNTING_TIMESTAMP END) ORDER BY  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP)
  ELSE 0 END AS NET_LOSS_PAYMENT_AMOUNT_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN NET_LOSS_PAYMENT_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE, REOPEN_TIMESTAMP ORDER BY ACCOUNTING_TIMESTAMP) AS NET_LOSS_PAYMENT_AMOUNT_SINCE_REOPEN_CM
,SUM(CASE WHEN ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'OR RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'THEN NET_LOSS_PAYMENT_AMOUNT ELSE 0 END)
  OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ORDER BY RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP) AS NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION_CM
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION_1
,CASE WHEN ACCOUNTING_TIMESTAMP IS NULL THEN LAST_VALUE(NET_LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN)  IGNORE NULLS
            OVER (PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE ,REOPEN_TIMESTAMP order by  RECORD_BEGIN_TIMESTAMP, ACCOUNTING_TIMESTAMP rows between unbounded preceding and current row) ELSE 0 END
        AS NET_LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN_1

  FROM (select  * from joining_feature_timeline) where
 ((record_begin_timestamp  <=  '2022-10-31 23:59:59')
     OR (ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'))

     ),
     
/*SELECT *, ROW_NUMBER() OVER( PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE
                          ORDER BY  CASE WHEN ACCOUNTING_TIMESTAMP <= '2022-10-31 23:59:59'THEN ACCOUNTING_TIMESTAMP
       ELSE RECORD_BEGIN_TIMESTAMP  END DESC   ) FROM feature_snapshot_stg1;*/

feature_snapshot as
(
SELECT *
,CASE WHEN STATUS_NAME = 'Closed' and CLOSE_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'and GROSS_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION != 0 THEN 1 ELSE 0 END AS CLOSED_WITH_GROSS_LOSS_PAYMENT_COUNT
,CASE WHEN STATUS_NAME = 'Closed' and CLOSE_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'and NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION != 0 THEN 1 ELSE 0 END AS CLOSED_WITH_NET_LOSS_PAYMENT_COUNT
,CASE WHEN STATUS_NAME = 'Closed' and CLOSE_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'and GROSS_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION = 0 THEN 1 ELSE 0 END AS CLOSED_WITHOUT_GROSS_LOSS_PAYMENT_COUNT
,CASE WHEN STATUS_NAME = 'Closed' and CLOSE_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59'and NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION = 0 THEN 1 ELSE 0 END AS CLOSED_WITHOUT_NET_LOSS_PAYMENT_COUNT

FROM (
SELECT

CLAIM_NUMBER
,CLAIM_PUBLICID_NK
,EXPOSURE_PUBLICID_NK
,CLAIM_SYMBOL_CODE
,S160_COVERAGE_CODE
,CREATE_TIMESTAMP
,RECORD_BEGIN_TIMESTAMP
,'2022-10-01'
,'2022-10-31 23:59:59'
,ACCOUNTING_TIMESTAMP
,RECORD_END_TIMESTAMP
,CLOSE_TIMESTAMP
,REOPEN_TIMESTAMP
,STATUS_NAME
,RESERVE_TYPE_NAME
,PRIOR_RESERVE_TYPE_NAME
,FEATURE_RESERVE_STATUS_CODE
,PENDING_OR_CLOSED
,NEW_REPORTED_COUNT_1 AS NEW_REPORTED_COUNT
,NEW_REOPENED_REPORTED_COUNT_1 AS NEW_REOPENED_REPORTED_COUNT  
,NEW_CLOSED_COUNT_1 AS NEW_CLOSED_COUNT
,CASE WHEN PENDING_OR_CLOSED = 'Pending' THEN 1 ELSE 0 END AS PENDING_COUNT
,CASE WHEN STATUS_NAME in ('Open','Closed') AND RANK_ORDER = 1 THEN LOSS_PAYMENT_AMOUNT_CM
      WHEN STATUS_NAME  = 'Closed' and RANK_ORDER <> 1 THEN LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION_CM
  ELSE LOSS_PAYMENT_AMOUNT_SINCE_REOPEN_CM END AS GROSS_LOSS_PAYMENT_AMOUNT
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION ELSE LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION_1 END AS GROSS_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN ELSE LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN_1 END AS GROSS_LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN

,CASE WHEN STATUS_NAME in ('Open','Closed') AND RANK_ORDER = 1 THEN EXPENSE_PAYMENT_AMOUNT_CM
      WHEN STATUS_NAME  = 'Closed' and RANK_ORDER <> 1 THEN EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION_CM
  ELSE EXPENSE_PAYMENT_AMOUNT_SINCE_REOPEN_CM END AS EXPENSE_PAYMENT_AMOUNT
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION ELSE EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION_1 END AS EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN ELSE EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN_1 END AS EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN

,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL AND STATUS_NAME in ('Open','Reopened') THEN CASE_RESERVE_LOSS_AMOUNT
	  WHEN ACCOUNTING_TIMESTAMP IS NULL AND STATUS_NAME in ('Open','Reopened') THEN CASE_RESERVE_LOSS_AMOUNT_1 ELSE 0 END AS CASE_RESERVE_LOSS_AMOUNT
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL AND STATUS_NAME in ('Open','Reopened') THEN CASE_RESERVE_EXPENSE_AMOUNT
	  WHEN ACCOUNTING_TIMESTAMP IS NULL AND STATUS_NAME in ('Open','Reopened') THEN CASE_RESERVE_EXPENSE_AMOUNT_1 ELSE 0 END AS CASE_RESERVE_EXPENSE_AMOUNT


,CASE WHEN STATUS_NAME in ('Open','Closed') AND RANK_ORDER = 1 THEN SALVAGE_RECOVERY_AMOUNT_CM
      WHEN STATUS_NAME  = 'Closed' and RANK_ORDER <> 1 THEN SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION_CM
  ELSE SALVAGE_RECOVERY_AMOUNT_SINCE_REOPEN_CM END AS SALVAGE_RECOVERY_AMOUNT
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION ELSE SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION_1 END AS SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN SALVAGE_RECOVERY_AMOUNT_SINCE_LAST_REOPEN ELSE SALVAGE_RECOVERY_AMOUNT_SINCE_LAST_REOPEN_1 END AS SALVAGE_RECOVERY_AMOUNT_SINCE_LAST_REOPEN

,CASE WHEN STATUS_NAME in ('Open','Closed') AND RANK_ORDER = 1 THEN SUBROGATION_RECOVERY_AMOUNT_CM
      WHEN STATUS_NAME  = 'Closed' and RANK_ORDER <> 1 THEN SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION_CM
  ELSE SUBROGATION_RECOVERY_AMOUNT_SINCE_REOPEN_CM END AS SUBROGATION_RECOVERY_AMOUNT
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION ELSE SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION_1 END AS SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN SUBROGATION_RECOVERY_AMOUNT_SINCE_LAST_REOPEN ELSE SUBROGATION_RECOVERY_AMOUNT_SINCE_LAST_REOPEN_1 END AS SUBROGATION_RECOVERY_AMOUNT_SINCE_LAST_REOPEN

,CASE WHEN STATUS_NAME in ('Open','Closed') AND RANK_ORDER = 1 THEN SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_CM
      WHEN STATUS_NAME  = 'Closed' and RANK_ORDER <> 1 THEN SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION_CM
  ELSE SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_REOPEN_CM END AS SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION ELSE SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION_1 END AS SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_LAST_REOPEN ELSE SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_LAST_REOPEN_1 END AS SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_LAST_REOPEN

,CASE WHEN STATUS_NAME in ('Open','Closed') AND RANK_ORDER = 1 THEN ADJUSTER_EXPENSE_PAYMENT_AMOUNT_CM
      WHEN STATUS_NAME  = 'Closed' and RANK_ORDER <> 1 THEN ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION_CM
  ELSE ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_REOPEN_CM END AS ADJUSTER_EXPENSE_PAYMENT_AMOUNT
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION ELSE ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION_1 END AS ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN ELSE ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN_1 END AS ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN

,CASE WHEN STATUS_NAME in ('Open','Closed') AND RANK_ORDER = 1 THEN NET_LOSS_PAYMENT_AMOUNT_CM
      WHEN STATUS_NAME  = 'Closed' and RANK_ORDER <> 1 THEN NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION_CM
  ELSE NET_LOSS_PAYMENT_AMOUNT_SINCE_REOPEN_CM END AS NET_LOSS_PAYMENT_AMOUNT
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION ELSE NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION_1 END AS NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION
,CASE WHEN ACCOUNTING_TIMESTAMP IS NOT NULL THEN NET_LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN ELSE NET_LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN_1 END AS NET_LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN

FROM
(
SELECT * FROM
(
SELECT * FROM
feature_snapshot_stg1
QUALIFY ROW_NUMBER() OVER( PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE
                          ORDER BY  CASE WHEN ACCOUNTING_TIMESTAMP <= '2022-10-31 23:59:59'THEN ACCOUNTING_TIMESTAMP
       ELSE RECORD_BEGIN_TIMESTAMP  END DESC  ) = 1
) WHERE STATUS_NAME in ('Open', 'Reopened')

--))
--SELECT * FROM feature_snapshot;

union 
SELECT * FROM
feature_snapshot_stg1 where ((ACCOUNTING_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59')
                                    OR (RECORD_BEGIN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59')) and status_name = 'Closed'
QUALIFY ROW_NUMBER() OVER( PARTITION BY CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, CLAIM_SYMBOL_CODE
                         ORDER BY  CASE WHEN ACCOUNTING_TIMESTAMP <= '2022-10-31 23:59:59'THEN ACCOUNTING_TIMESTAMP
  ELSE RECORD_BEGIN_TIMESTAMP  END DESC   ) = 1)
       )
)

/* final_reopen as 
(select * from reopen_snapshot where REOPEN_TIMESTAMP between '2022-10-01'and '2022-10-31 23:59:59' 
    QUALIFY ROW_NUMBER () OVER (PARTITION BY  CLAIM_NUMBER,EXPOSURE_PUBLICID_NK, 
    CLAIM_SYMBOL_CODE order by NEW_REOPENED_REPORTED_COUNT desc) =1 )
 */
--select * FROM final_reopen;
select

'2022-10-31'AS SNAP_DATE,
b.CLAIM_PUBLICID_NK,
b.CLAIM_NUMBER,
b.EXPOSURE_PUBLICID_NK,
b.S160_COVERAGE_CODE,
b.CLAIM_SYMBOL_CODE,
b.CREATE_TIMESTAMP,
b.CLOSE_TIMESTAMP,
b.REOPEN_TIMESTAMP,
NULL as PRIOR_CLOSE_TIMESTAMP,
NULL as PRIOR_REOPEN_TIMESTAMP,
b.PENDING_OR_CLOSED,
b.STATUS_NAME,
b.RESERVE_TYPE_NAME,
b.FEATURE_RESERVE_STATUS_CODE,
b.GROSS_LOSS_PAYMENT_AMOUNT as GROSS_LOSS_PAYMENT_CURRENT_MONTH_AMOUNT,
b.GROSS_LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN as GROSS_LOSS_PAYMENT_SINCE_LAST_REOPEN_AMOUNT,
b.GROSS_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION as GROSS_LOSS_PAYMENT_SINCE_INCEPTION_AMOUNT,
b.NET_LOSS_PAYMENT_AMOUNT AS NET_LOSS_PAYMENT_CURRENT_MONTH_AMOUNT,
b.NET_LOSS_PAYMENT_AMOUNT_SINCE_LAST_REOPEN as NET_LOSS_PAYMENT_SINCE_LAST_REOPEN_AMOUNT,
b.NET_LOSS_PAYMENT_AMOUNT_SINCE_INCEPTION as NET_LOSS_PAYMENT_SINCE_INCEPTION_AMOUNT,
b.EXPENSE_PAYMENT_AMOUNT AS EXPENSE_PAYMENT_CURRENT_MONTH_AMOUNT,
b.EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN as EXPENSE_PAYMENT_SINCE_LAST_REOPEN_AMOUNT,
b.EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION as EXPENSE_PAYMENT_SINCE_INCEPTION_AMOUNT,
b.SALVAGE_RECOVERY_AMOUNT AS SALVAGE_RECOVERY_CURRENT_MONTH_AMOUNT,
b.SALVAGE_RECOVERY_AMOUNT_SINCE_LAST_REOPEN as SALVAGE_RECOVERY_SINCE_LAST_REOPEN_AMOUNT,
b.SALVAGE_RECOVERY_AMOUNT_SINCE_INCEPTION as SALVAGE_RECOVERY_SINCE_INCEPTION_AMOUNT,
b.SUBROGATION_RECOVERY_AMOUNT AS SUBROGATION_RECOVERY_CURRENT_MONTH_AMOUNT,
b.SUBROGATION_RECOVERY_AMOUNT_SINCE_LAST_REOPEN as SUBROGATION_RECOVERY_SINCE_LAST_REOPEN_AMOUNT,
b.SUBROGATION_RECOVERY_AMOUNT_SINCE_INCEPTION as SUBROGATION_RECOVERY_SINCE_INCEPTION_AMOUNT,
b.SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT AS SUBROGATION_ADDITIONAL_PAYMENT_CURRENT_MONTH_AMOUNT,
b.SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_LAST_REOPEN as SUBROGATION_ADDITIONAL_PAYMENT_SINCE_LAST_REOPEN_AMOUNT,
b.SUBROGATION_ADDITIONAL_PAYMENT_AMOUNT_SINCE_INCEPTION as SUBROGATION_ADDITIONAL_PAYMENT_SINCE_INCEPTION_AMOUNT,
NULL as STAFF_COUNSEL_PAYMENT_CURRENT_MONTH_AMOUNT,
NULL as STAFF_COUNSEL_PAYMENT_SINCE_LAST_REOPEN_AMOUNT,
NULL as STAFF_COUNSEL_PAYMENT_SINCE_INCEPTION_AMOUNT,
b.ADJUSTER_EXPENSE_PAYMENT_AMOUNT AS ADJUSTER_EXPENSE_PAYMENT_CURRENT_MONTH_AMOUNT,
b.ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_LAST_REOPEN as ADJUSTER_EXPENSE_PAYMENT_SINCE_LAST_REOPEN_AMOUNT,
b.ADJUSTER_EXPENSE_PAYMENT_AMOUNT_SINCE_INCEPTION as ADJUSTER_EXPENSE_PAYMENT_SINCE_INCEPTION_AMOUNT,
NULL as DCC_PAYMENT_CURRENT_MONTH_AMOUNT,
NULL as DCC_PAYMENT_SINCE_LAST_REOPEN_AMOUNT,
NULL as DCC_PAYMENT_SINCE_INCEPTION_AMOUNT,
b.NEW_REPORTED_COUNT,
B.NEW_REOPENED_REPORTED_COUNT,
b.NEW_CLOSED_COUNT,
b.CLOSED_WITH_GROSS_LOSS_PAYMENT_COUNT,
b.CLOSED_WITH_NET_LOSS_PAYMENT_COUNT,
b.CLOSED_WITHOUT_GROSS_LOSS_PAYMENT_COUNT,
b.CLOSED_WITHOUT_NET_LOSS_PAYMENT_COUNT,
b.PENDING_COUNT,
b.CASE_RESERVE_LOSS_AMOUNT,
b.CASE_RESERVE_EXPENSE_AMOUNT,
CONVERT_TIMEZONE('UTC', 'America/New_York', SYSDATE()) as LOAD_TIMESTAMP,
'ATLAS' as RECORD_SOURCE,
--{{run_id()}} as GDH_ETL_RUN_ID

from feature_snapshot b --inner join final_reopen a
 --on a.claim_number = b.claim_number and a.EXPOSURE_PUBLICID_NK = b.EXPOSURE_PUBLICID_NK and a.claim_symbol_code = b.claim_symbol_code
;
 if there is a scenario where a "Closed" record on the snapshot contains at least 2 reopens (which happen in the above scenarios), then when the code sorts records to find the row from the timeline to populate, it grabs the more recent record, which does not have the count
