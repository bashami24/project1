

HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.



import org.h2.jdbcx.JdbcDataSource;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import static org.junit.Assert.*;

public class DAOTest {

    private JdbcDataSource dataSource;
    private Connection connection;
    private BookDAO bookDAO;
    private SellerDAO sellerDAO;

    @Before
    public void setUp() throws SQLException {
        dataSource = new JdbcDataSource();
        dataSource.setURL("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
        dataSource.setUser("sa");
        dataSource.setPassword("");

        connection = dataSource.getConnection();
        createTables();

        bookDAO = new BookDAO(connection);
        sellerDAO = new SellerDAO(connection);
    }

    @After
    public void tearDown() throws SQLException {
        dropTables();
        connection.close();
    }

    private void createTables() throws SQLException {
        PreparedStatement ps = connection.prepareStatement(
                "CREATE TABLE Book (id INT PRIMARY KEY, name VARCHAR(255), price DOUBLE, authorName VARCHAR(255))"
        );
        ps.executeUpdate();
        ps.close();

        ps = connection.prepareStatement(
                "CREATE TABLE Seller (id INT PRIMARY KEY, name VARCHAR(255))"
        );
        ps.executeUpdate();
        ps.close();
    }

    private void dropTables() throws SQLException {
        PreparedStatement ps = connection.prepareStatement("DROP TABLE IF EXISTS Book");
        ps.executeUpdate();
        ps.close();

        ps = connection.prepareStatement("DROP TABLE IF EXISTS Seller");
        ps.executeUpdate();
        ps.close();
    }

    @Test
    public void testBookCRUD() throws SQLException {
        // Insert
        Book book = new Book("Book1", 10.0, "Author1");
        bookDAO.insertBook(book);

        // Get
        Book retrievedBook = bookDAO.getBookById(book.getId());
        assertNotNull(retrievedBook);
        assertEquals(book.getName(), retrievedBook.getName());
        assertEquals(book.getPrice(), retrievedBook.getPrice(), 0.01);
        assertEquals(book.getAuthorName(), retrievedBook.getAuthorName());

        // Update
        book.setName("UpdatedBook");
        bookDAO.updateBook(book.getId(), book);
        retrievedBook = bookDAO.getBookById(book.getId());
        assertEquals(book.getName(), retrievedBook.getName());

        // Delete
        bookDAO.deleteBook(book.getId());
        retrievedBook = bookDAO.getBookById(book.getId());
        assertNull(retrievedBook);
    }

    @Test
    public void testSellerCRUD() throws SQLException {
        // Insert
        Seller seller = new Seller("Seller1");
        sellerDAO.insertSeller(seller);

        // Get
        Seller retrievedSeller = sellerDAO.getSellerById(seller.getId());
        assertNotNull(retrievedSeller);
        assertEquals(seller.getName(), retrievedSeller.getName());

        // Update
        seller.setName("UpdatedSeller");
        sellerDAO.updateSeller(seller.getId(), seller);
        retrievedSeller = sellerDAO.getSellerById(seller.getId());
        assertEquals(seller.getName(), retrievedSeller.getName());

        // Delete
        sellerDAO.deleteSeller(seller.getId());
        retrievedSeller = sellerDAO.getSellerById(seller.getId());
        assertNull(retrievedSeller);
    }

    @Test
    public void testGetAllBooksAndSellers() throws SQLException {
        // Insert some books and sellers
        Book book1 = new Book("Book1", 10.0, "Author1");
        Book book2 = new Book("Book2", 20.0, "Author2");
        bookDAO.insertBook(book1);
        bookDAO.insertBook(book2);

        Seller seller1 = new Seller("Seller1");
        Seller seller2 = new Seller("Seller2");
        sellerDAO.insertSeller(seller1);
        sellerDAO.insertSeller(seller2);

        // Get all books and sellers
        List<Book> books = bookDAO.getAllBooks();
        List<Seller> sellers = sellerDAO.getAllSellers();

        assertEquals(2, books.size());
        assertEquals(2, sellers.size());
    }
}

[main] INFO io.javalin.Javalin - Listening on http://localhost:9004/
[main] INFO io.javalin.Javalin - You are running Javalin 5.0.1 (released October 2, 2022. Your Javalin version is 508 days old. Consider checking for a newer version.).
[main] INFO io.javalin.Javalin - Javalin started in 590ms \o/
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "BOOK" not found; SQL statement:
select * from Book where id = ? [42102-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.Parser.getTableOrViewNotFoundDbException(Parser.java:8398)
	at org.h2.command.Parser.getTableOrViewNotFoundDbException(Parser.java:8369)
	at org.h2.command.Parser.readTableOrView(Parser.java:8358)
	at org.h2.command.Parser.readTablePrimary(Parser.java:1863)
	at org.h2.command.Parser.readTableReference(Parser.java:2334)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2772)
	at org.h2.command.Parser.parseSelect(Parser.java:2878)
	at org.h2.command.Parser.parseQueryPrimary(Parser.java:2762)
	at org.h2.command.Parser.parseQueryTerm(Parser.java:2633)
	at org.h2.command.Parser.parseQueryExpressionBody(Parser.java:2612)
	at org.h2.command.Parser.parseQueryExpressionBodyAndEndOfQuery(Parser.java:2605)
	at org.h2.command.Parser.parseQueryExpression(Parser.java:2598)
	at org.h2.command.Parser.parseQuery(Parser.java:2567)
	at org.h2.command.Parser.parsePrepared(Parser.java:724)
	at org.h2.command.Parser.parse(Parser.java:689)
	at org.h2.command.Parser.parse(Parser.java:661)
	at org.h2.command.Parser.prepareCommand(Parser.java:569)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:92)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:288)
	at org.example.DAO.BookDAO.getBookById(BookDAO.java:50)
	at org.example.Service.BookService.getBookById(BookService.java:39)
	at org.example.Controller.Controller.lambda$getAPI$2(Controller.java:49)
	at io.javalin.routing.HandlerEntry.handle(HandlerEntry.kt:19)
	at io.javalin.http.servlet.DefaultTasks.HTTP$lambda-8$lambda-6$lambda-5(DefaultTasks.kt:35)
	at io.javalin.http.servlet.JavalinServlet.handleTask(JavalinServlet.kt:79)
	at io.javalin.http.servlet.JavalinServlet.handleSync(JavalinServlet.kt:46)
	at io.javalin.http.servlet.JavalinServlet.service(JavalinServlet.kt:34)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:587)
	at io.javalin.jetty.JavalinJettyServlet.service(JavalinJettyServlet.kt:58)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:587)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:764)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:529)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:221)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1571)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:221)
	at io.javalin.jetty.JettyServer$start$wsAndHttpHandler$1.doHandle(JettyServer.kt:57)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:176)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:484)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1544)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:174)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1302)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:129)
	at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:173)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:122)
	at org.eclipse.jetty.server.Server.handle(Server.java:563)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$0(HttpChannel.java:505)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:762)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:497)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:282)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:314)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:100)
	at org.eclipse.jetty.io.SelectableChannelEndPoint$1.run(SelectableChannelEndPoint.java:53)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.runTask(AdaptiveExecutionStrategy.java:421)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.consumeTask(AdaptiveExecutionStrategy.java:390)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.tryProduce(AdaptiveExecutionStrategy.java:277)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.lambda$new$0(AdaptiveExecutionStrategy.java:139)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:411)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:933)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1077)
	at java.base/java.lang.Thread.run(Thread.java:829)
[JettyServerThreadPool-40] WARN io.javalin.Javalin - Uncaught exception
java.lang.NullPointerException: Parameter specified as non-null is null: method io.javalin.http.Context.json, parameter obj
	at io.javalin.http.Context.json(Context.kt)
	at org.example.Controller.Controller.lambda$getAPI$2(Controller.java:50)
	at io.javalin.routing.HandlerEntry.handle(HandlerEntry.kt:19)
	at io.javalin.http.servlet.DefaultTasks.HTTP$lambda-8$lambda-6$lambda-5(DefaultTasks.kt:35)
	at io.javalin.http.servlet.JavalinServlet.handleTask(JavalinServlet.kt:79)
	at io.javalin.http.servlet.JavalinServlet.handleSync(JavalinServlet.kt:46)
	at io.javalin.http.servlet.JavalinServlet.service(JavalinServlet.kt:34)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:587)
	at io.javalin.jetty.JavalinJettyServlet.service(JavalinJettyServlet.kt:58)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:587)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:764)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:529)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:221)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1571)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:221)
	at io.javalin.jetty.JettyServer$start$wsAndHttpHandler$1.doHandle(JettyServer.kt:57)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:176)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:484)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1544)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:174)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1302)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:129)
	at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:173)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:122)
	at org.eclipse.jetty.server.Server.handle(Server.java:563)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$0(HttpChannel.java:505)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:762)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:497)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:282)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:314)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:100)
	at org.eclipse.jetty.io.SelectableChannelEndPoint$1.run(SelectableChannelEndPoint.java:53)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.runTask(AdaptiveExecutionStrategy.java:421)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.consumeTask(AdaptiveExecutionStrategy.java:390)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.tryProduce(AdaptiveExecutionStrategy.java:277)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.lambda$new$0(AdaptiveExecutionStrategy.java:139)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:411)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:933)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1077)
	at java.base/java.lang.Thread.run(Thread.java:829)

Process finished with exit code 130


