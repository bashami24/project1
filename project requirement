HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.

Unit testing of service classes
Logging within service classes

Javalin

public class Product {
    private String productId;
    private String productName;
    private double price;
    private String sellerName;

    // Constructors, getters, and setters
}

public class Seller {
    private String sellerName;

    // Constructors, getters, and setters
}


public class Main {
    public static void main(String[] args) {
        Javalin app = Javalin.create().start(7000);

        // Seller endpoints
        app.get("/seller", SellerController::getAllSellers);
        app.post("/seller", SellerController::createSeller);

        // Product endpoints
        app.get("/product", ProductController::getAllProducts);
        app.get("/product/:id", ProductController::getProductById);
        app.post("/product", ProductController::createProduct);
        app.put("/product/:id", ProductController::updateProduct);
        app.delete("/product/:id", ProductController::deleteProduct);
    }
}
GET:

Definition: Retrieves data from the server.
Safe: Yes (Does not modify the state of the server).
Idempotent: Yes (Multiple identical requests will have the same effect as a single request).
Example: Retrieving a list of products from a server.
POST:

Definition: Submits data to be processed to the server.
Safe: No (May modify the state of the server).
Idempotent: No (Multiple identical requests may have different effects).
Example: Creating a new user account on a server.
PUT:

Definition: Updates an existing resource on the server.
Safe: No (May modify the state of the server).
Idempotent: Yes (Multiple identical requests will have the same effect as a single request).
Example: Updating the details of a product on a server.
DELETE:

Definition: Deletes a resource from the server.
Safe: No (Modifies the state of the server by removing a resource).
Idempotent: Yes (Multiple identical requests will have the same effect as a single request).
Example: Deleting a user account from a server.
PATCH:

Definition: Partially updates a resource on the server.
Safe: No (May modify the state of the server).
Idempotent: No (Multiple identical requests may have different effects).
Example: Changing the status of an order from "pending" to "shipped" on a server.
OPTIONS:

Definition: Requests information about the communication options available for a resource or server.
Safe: Yes (Does not modify the state of the server).
Idempotent: Yes (Multiple identical requests will have the same effect as a single request).
Example: Checking which HTTP methods are supported by a server.
HEAD:

Definition: Requests the headers that would be returned if the HEAD request's URL was instead requested with a GET method.
Safe: Yes (Does not modify the state of the server).
Idempotent: Yes (Multiple identical requests will have the same effect as a single request).
Example: Checking if a resource exists on a server without retrieving its full content.
TRACE:

Definition: Echoes back the received request so that a client can see what (if any) changes or additions have been made by intermediate servers.
Safe: Yes (Does not modify the state of the server).
Idempotent: Yes (Multiple identical requests will have the same effect as a single request).
Example: Debugging or diagnosing network connectivity issues.
CONNECT:

Definition: Establishes a tunnel to the server identified by the target resource.
Safe: No (May modify the state of the server).
Idempotent: No (Multiple identical requests may have different effects).
Example: Establishing a secure communication channel with a server for HTTPS connections.
These are some of the commonly used HTTP verbs along with their definitions and characteristics. Different verbs serve different purposes and have different effects on the server. It's important to use the appropriate verb based on the desired action and the RESTful principles.
