

HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.




// models/Seller.ts
export interface Seller {
  id: number;
  name: string;
}

// models/Product.ts
export interface Product {
  id: number;
  name: string;
  price: number;
  sellerId: number;
}

// context/DataContext.tsx
import React, { createContext, useContext, useState } from 'react';
import { Seller } from '../models/Seller';
import { Product } from '../models/Product';

interface DataContextType {
  sellers: Seller[];
  setSellers: React.Dispatch<React.SetStateAction<Seller[]>>;
  products: Product[];
  setProducts: React.Dispatch<React.SetStateAction<Product[]>>;
}

const DataContext = createContext<DataContextType | undefined>(undefined);

export const useData = () => {
  const context = useContext(DataContext);
  if (!context) {
    throw new Error('useData must be used within a DataProvider');
  }
  return context;
};

export const DataProvider: React.FC = ({ children }) => {
  const [sellers, setSellers] = useState<Seller[]>([]);
  const [products, setProducts] = useState<Product[]>([]);

  return (
    <DataContext.Provider value={{ sellers, setSellers, products, setProducts }}>
      {children}
    </DataContext.Provider>
  );
};

// services/SellerService.ts
import { Seller } from '../models/Seller';

export const getSellers = async (): Promise<Seller[]> => {
  // Your API call to fetch sellers
  return [];
};

// services/ProductService.ts
import { Product } from '../models/Product';

export const getProducts = async (): Promise<Product[]> => {
  // Your API call to fetch products
  return [];
};

// pages/SellerPage.tsx
import React, { useEffect } from 'react';
import { useData } from '../context/DataContext';
import { getSellers } from '../services/SellerService';

export const SellerPage = () => {
  const { sellers, setSellers } = useData();

  useEffect(() => {
    getSellers().then((data) => setSellers(data));
  }, [setSellers]);

  return (
    <div>
      <h1>Sellers</h1>
      <ul>
        {sellers.map((seller) => (
          <li key={seller.id}>{seller.name}</li>
        ))}
      </ul>
    </div>
  );
};

// pages/ProductPage.tsx
import React, { useEffect } from 'react';
import { useData } from '../context/DataContext';
import { getProducts } from '../services/ProductService';

export const ProductPage = () => {
  const { products, setProducts } = useData();

  useEffect(() => {
    getProducts().then((data) => setProducts(data));
  }, [setProducts]);

  return (
    <div>
      <h1>Products</h1>
      <ul>
        {products.map((product) => (
          <li key={product.id}>
            {product.name} - ${product.price}
            <button>Edit</button>
            <button>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

// App.tsx
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { DataProvider } from './context/DataContext';
import { SellerPage } from './pages/SellerPage';
import { ProductPage } from './pages/ProductPage';

function App() {
  return (
    <DataProvider>
      <Router>
        <Switch>
          <Route exact path="/">
            <SellerPage />
          </Route>
          <Route path="/products">
            <ProductPage />
          </Route>
        </Switch>
      </Router>
    </DataProvider>
  );
}

export default App;
