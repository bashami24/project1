

HTTP project
Two models:
    Product
        Product Id (must be unique)
        Product Name
        Price
        Seller Name
    Seller
        Seller Name (must be unique)

Create/Read functionality on Seller
    GET /seller/
        - All sellers
    POST /seller/
        - Seller names must be non-null & unique
CRUD functionality on Product
    GET /product/
        - All products
    GET /product/{id}
        - Get a single product
        - We should get a 404 error when we try to access a non-existed product.
    POST /product/ - Add a single product
        - Product ids should be non-null and unique
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    PUT /product/{id} - Update a single product
        - Product names should be non-null
        - Price should be over 0
        - Seller name should refer to an actually existing seller
    DELETE /product/{id} - Delete a single product
        - DELETE should always return 200, regardless of if the item existed
            at the start or not. This is convention.




import axios from 'axios';
import { Seller } from '../models/Seller';

const API_URL = 'http://localhost:9001';

export const getAllSellers = async (): Promise<Seller[]> => {
    const response = await axios.get<Seller[]>(`${API_URL}/sellers`);
    return response.data;
};

import axios from 'axios';
import { Product } from '../models/Product';

const API_URL = 'http://localhost:9001';

export const getAllProducts = async (): Promise<Product[]> => {
    const response = await axios.get<Product[]>(`${API_URL}/products`);
    return response.data;
};

import axios from 'axios';
import { Product } from '../models/Product';

const API_URL = 'http://localhost:9001';

export const getAllProducts = async (): Promise<Product[]> => {
    const response = await axios.get<Product[]>(`${API_URL}/products`);
    return response.data;
};


// components/ProductList.tsx
import React, { useEffect, useState } from 'react';
import { Product } from '../models/Product';
import { getAllProducts, addProduct } from '../services/ProductService';

export const ProductList: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showMenuId, setShowMenuId] = useState<number | null>(null);
    const [newProductName, setNewProductName] = useState('');

    useEffect(() => {
        getAllProducts().then(setProducts);
    }, []);

    const toggleMenu = (productId: number) => {
        setShowMenuId((prevId) => (prevId === productId ? null : productId));
    };

    const handleAddProduct = async () => {
        if (!newProductName) return;
        await addProduct({ id: 0, name: newProductName, price: 0, sellerId: 0 });
        setNewProductName('');
        getAllProducts().then(setProducts);
    };

    return (
        <div>
            <h2>All Products</h2>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>
                        {product.name}{' '}
                        <button onClick={() => toggleMenu(product.id)}>
                            {showMenuId === product.id ? 'Hide' : 'Show'} Menu
                        </button>
                        {showMenuId === product.id && (
                            <div>
                                <button onClick={() => console.log(`Update product ${product.id}`)}>Update</button>
                                <button onClick={() => console.log(`Delete product ${product.id}`)}>Delete</button>
                            </div>
                        )}
                    </li>
                ))}
            </ul>
            <input
                type="text"
                placeholder="Enter product name"
                value={newProductName}
                onChange={(e) => setNewProductName(e.target.value)}
            />
            <button onClick={handleAddProduct}>Add Product</button>
        </div>
    );
};












// models/Seller.ts
export interface Seller {
    id: number;
    name: string;
}

// models/Product.ts
export interface Product {
    id: number;
    name: string;
    price: number;
    sellerId: number;
}

// services/SellerService.ts
import { Seller } from '../models/Seller';

export const getAllSellers = async (): Promise<Seller[]> => {
    // Fetch sellers from your API
    return [];
};

export const addSeller = async (seller: Seller): Promise<void> => {
    // Add new seller to your API
};

// services/ProductService.ts
import { Product } from '../models/Product';

export const getAllProducts = async (): Promise<Product[]> => {
    // Fetch products from your API
    return [];
};

export const addProduct = async (product: Product): Promise<void> => {
    // Add new product to your API
};

// components/AddSellerForm.tsx
import React, { useState } from 'react';
import { addSeller } from '../services/SellerService';

export const AddSellerForm: React.FC = () => {
    const [name, setName] = useState('');

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!name) return;
        await addSeller({ id: 0, name }); // Assuming id is auto-generated on the backend
        setName('');
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="text" value={name} onChange={(e) => setName(e.target.value)} />
            <button type="submit">Add Seller</button>
        </form>
    );
};

// components/SellerList.tsx
import React, { useEffect, useState } from 'react';
import { Seller } from '../models/Seller';
import { getAllSellers } from '../services/SellerService';

export const SellerList: React.FC = () => {
    const [sellers, setSellers] = useState<Seller[]>([]);

    useEffect(() => {
        getAllSellers().then(setSellers);
    }, []);

    return (
        <div>
            <h2>All Sellers</h2>
            <ul>
                {sellers.map((seller) => (
                    <li key={seller.id}>{seller.name}</li>
                ))}
            </ul>
        </div>
    );
};

// main app under components/MainApp.tsx
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { SellerList } from './SellerList';
import { AddSellerForm } from './AddSellerForm';

const MainApp: React.FC = () => {
    return (
        <Router>
            <Switch>
                <Route path="/" exact component={SellerList} />
                <Route path="/add-seller" component={AddSellerForm} />
                {/* Add more routes for products */}
            </Switch>
        </Router>
    );
};

export default MainApp;

import axios from 'axios';
import { Seller } from '../models/Seller';

const API_URL = 'http://localhost:9001';

export const addSeller = async (seller: Seller): Promise<void> => {
    try {
        await axios.post(`${API_URL}/sellers`, seller);
    } catch (error) {
        console.error('Error adding seller:', error);
        throw error; // Rethrow the error to handle it elsewhere if needed
    }
};








import axios from 'axios';
import { Product } from '../models/Product';

const API_URL = 'http://localhost:9001';

export const getAllProducts = async (): Promise<Product[]> => {
    try {
        const response = await axios.get<Product[]>(`${API_URL}/products`);
        return response.data;
    } catch (error) {
        console.error('Error fetching products:', error);
        throw error; // Rethrow the error to handle it elsewhere if needed
    }
};

export const addProduct = async (product: Product): Promise<void> => {
    try {
        await axios.post(`${API_URL}/products`, product);
    } catch (error) {
        console.error('Error adding product:', error);
        throw error; // Rethrow the error to handle it elsewhere if needed
    }
};


// pages/NotFoundPage.tsx
import React from 'react';

const NotFoundPage: React.FC = () => {
    return (
        <div>
            <h1>404 - Page Not Found</h1>
            <p>The page you are looking for does not exist.</p>
        </div>
    );
};



// pages/SellerPage.tsx
import React from 'react';
import { Seller } from '../models/Seller';
import { getAllSellers } from '../services/SellerService';

const SellerPage: React.FC = () => {
    const [sellers, setSellers] = React.useState<Seller[]>([]);

    React.useEffect(() => {
        const fetchSellers = async () => {
            const fetchedSellers = await getAllSellers();
            setSellers(fetchedSellers);
        };
        fetchSellers();
    }, []);

    return (
        <div>
            <h1>Sellers</h1>
            <ul>
                {sellers.map((seller) => (
                    <li key={seller.id}>{seller.name}</li>
                ))}
            </ul>
        </div>
    );
};

export default SellerPage;


export default NotFoundPage;





import React, { useEffect, useState } from 'react';
import { Product } from '../models/Product';
import { getAllProducts, addProduct } from '../services/ProductService';

const ProductList: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [showMenuId, setShowMenuId] = useState<number | null>(null);
    const [newProductName, setNewProductName] = useState('');

    useEffect(() => {
        getAllProducts().then(setProducts);
    }, []);

    const toggleMenu = (productId: number) => {
        setShowMenuId((prevId) => (prevId === productId ? null : productId));
    };

    const handleAddProduct = async () => {
        if (!newProductName) return;
        await addProduct({ id: 0, name: newProductName, price: 0, sellerId: 0 });
        setNewProductName('');
        getAllProducts().then(setProducts);
    };

    return (
        <div>
            <h2>All Products</h2>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>
                        {product.name}{' '}
                        <button onClick={() => toggleMenu(product.id)}>
                            {showMenuId === product.id ? 'Hide' : 'Show'} Menu
                        </button>
                        {showMenuId === product.id && (
                            <div>
                                <button onClick={() => console.log(`Update product ${product.id}`)}>Update</button>
                                <button onClick={() => console.log(`Delete product ${product.id}`)}>Delete</button>
                            </div>
                        )}
                    </li>
                ))}
            </ul>
            <input
                type="text"
                placeholder="Enter product name"
                value={newProductName}
                onChange={(e) => setNewProductName(e.target.value)}
            />
            <button onClick={handleAddProduct}>Add Product</button>
        </div>
    );
};

export default ProductList;




import React from 'react';
import { Product } from '../models/Product';
import { getAllProducts } from '../services/ProductService';

const ProductPage: React.FC = () => {
    const [products, setProducts] = React.useState<Product[]>([]);

    React.useEffect(() => {
        const fetchProducts = async () => {
            const fetchedProducts = await getAllProducts();
            setProducts(fetchedProducts);
        };
        fetchProducts();
    }, []);

    return (
        <div>
            <h1>Products</h1>
            <ul>
                {products.map((product) => (
                    <li key={product.id}>{product.name}</li>
                ))}
            </ul>
        </div>
    );
};


import React from 'react';
import { Seller } from '../models/Seller';

interface SellerProps {
    seller: Seller;
}

const SellerComponent: React.FC<SellerProps> = ({ seller }) => {
    return (
        <div>
            <h3>{seller.name}</h3>
            <p>ID: {seller.id}</p>
        </div>
    );
};

export default SellerComponent;


export default ProductPage;
